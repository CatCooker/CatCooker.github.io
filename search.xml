<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>3D Reconstruction</title>
    <url>/2022/01/03/3DReconstruction/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>3D Reconstruction</category>
      </categories>
  </entry>
  <entry>
    <title>BUG修复</title>
    <url>/2020/04/29/Bug%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BUG-1-访问链接时路径出现-20-hexo5版本问题"><a href="#BUG-1-访问链接时路径出现-20-hexo5版本问题" class="headerlink" title="BUG 1 :访问链接时路径出现%20 (hexo5版本问题)"></a>BUG 1 :访问链接时路径出现%20 (hexo5版本问题)</h2><ul>
<li>%20表示空格，<code>themes\next\_config.yml</code>menu中的路径删去空即可</li>
</ul>
<h2 id="BUG-2-侧边栏日志无法访问出现-7C-7C-20-hexo5版本问题"><a href="#BUG-2-侧边栏日志无法访问出现-7C-7C-20-hexo5版本问题" class="headerlink" title="BUG 2 : 侧边栏日志无法访问出现 %7C%7C%20 (hexo5版本问题)"></a>BUG 2 : 侧边栏日志无法访问出现 %7C%7C%20 (hexo5版本问题)</h2><p> themes\next\layout_macro\sidebar.swig下<code>url_for(theme.menu.archives).split(&#39;||&#39;)[0] | trim &quot;&gt;</code>将<code>||</code>转码了，将<code>url_for(theme.menu.archives.split(&#39;||&#39;)[0]) | trim &quot;&gt;</code>即可</p>
<hr>
<h2 id="BUG3-Java数据库插入中文后出现？？？"><a href="#BUG3-Java数据库插入中文后出现？？？" class="headerlink" title="BUG3 : Java数据库插入中文后出现？？？"></a>BUG3 : Java数据库插入中文后出现？？？</h2><p> 解决办法：在连接的数据库后加上?useUnicode=true&amp;characterEncoding=utf8</p>
<hr>
<h2 id="BUG4-数据库密码忘了-如何重置？8-x版本"><a href="#BUG4-数据库密码忘了-如何重置？8-x版本" class="headerlink" title="BUG4 : 数据库密码忘了 如何重置？8.x版本"></a>BUG4 : 数据库密码忘了 如何重置？8.x版本</h2><h4 id="1-打开一个cmd窗口输入"><a href="#1-打开一个cmd窗口输入" class="headerlink" title="1. 打开一个cmd窗口输入"></a>1. 打开一个cmd窗口输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --console --skip-grant-tables --shared-memory</span><br></pre></td></tr></table></figure>
<h4 id="2-打开另一个cmd窗口-输入"><a href="#2-打开另一个cmd窗口-输入" class="headerlink" title="2. 打开另一个cmd窗口 输入"></a>2. 打开另一个cmd窗口 输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p     #登录mysql</span><br><span class="line">出现password：直接回车</span><br></pre></td></tr></table></figure>
<h4 id="3-打开另一个cmd窗口-输入"><a href="#3-打开另一个cmd窗口-输入" class="headerlink" title="3. 打开另一个cmd窗口 输入"></a>3. 打开另一个cmd窗口 输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql;   切换数据库</span><br><span class="line">flush privileges; </span><br><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;newPassword&#39;;</span><br></pre></td></tr></table></figure>
<h2 id="BUG5-IDEA连接数据库时出现Server-returns-invalid-timezone"><a href="#BUG5-IDEA连接数据库时出现Server-returns-invalid-timezone" class="headerlink" title="BUG5 : IDEA连接数据库时出现Server returns invalid timezone."></a>BUG5 : IDEA连接数据库时出现Server returns invalid timezone.</h2><h4 id="1-打开cmd窗口输入"><a href="#1-打开cmd窗口输入" class="headerlink" title="1. 打开cmd窗口输入"></a>1. 打开cmd窗口输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -hlocalhost -uroot -p</span><br></pre></td></tr></table></figure>
<h4 id="2-输入"><a href="#2-输入" class="headerlink" title="2. 输入"></a>2. 输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like&#39;%time_zone&#39;;</span><br></pre></td></tr></table></figure>
<p>如果查询的结果为SYSTEM，则需要设置timezone</p>
<h4 id="3-输入"><a href="#3-输入" class="headerlink" title="3. 输入"></a>3. 输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set time_zone &#x3D; &#39;+8:00&#39;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>BUG修复</category>
      </categories>
      <tags>
        <tag>BUG</tag>
      </tags>
  </entry>
  <entry>
    <title>ByteCode</title>
    <url>/2021/09/13/ByteCode/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-Java指令集架构"><a href="#1-Java指令集架构" class="headerlink" title="1.Java指令集架构"></a>1.Java指令集架构</h3><blockquote>
<p>The JVM is both a <strong>stack machine</strong> and a <strong>register machine</strong>. Each frame for a method call has an “operand stack” and an array of “local variables”. The <strong>operand stack</strong> is used for <strong>operands</strong> to computations and for receiving the return value of a called method, while <strong>local variables</strong> serve the same purpose as <strong>registers</strong> and are also used to pass method arguments. The maximum size of the operand stack and local variable array, computed by the compiler, is part of the attributes of each method. Each can be independently sized from 0 to 65535 values, where each value is 32 bits. long and double types, which are 64 bits, take up two consecutive local variables</p>
</blockquote>
<ul>
<li>JVM的指令执行流程基于栈(Stack)以及操作数的架构。包含局部变量表和操作数栈。局部变量表抽象与硬件中的寄存器，存储方法中参与运算的数值。操作数栈用于存储操作码的操作对象–operate code [operands1，operands2]<h3 id="2-字节码分析"><a href="#2-字节码分析" class="headerlink" title="2.字节码分析"></a>2.字节码分析</h3></li>
<li>Java代码,程序员编写的java文件(*.java文件)。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteCode</span> </span>&#123;</span><br><span class="line">    <span class="comment">//fields</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//methods</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//local variable</span></span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; <span class="number">100</span>; ++j)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>利用javac将文件进行编译，建议的结果为一个.class文件</li>
<li>使用javap查看.class文件的文件内容<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Classfile /D:/Code/JVM/src/load/ByteCode<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">  <span class="title">Last</span> <span class="title">modified</span> 2021-9-13</span>; size <span class="number">344</span> bytes</span><br><span class="line">  MD5 checksum <span class="number">97f</span>91c47b959e4e4962e32be203cfabe</span><br><span class="line">  Compiled from <span class="string">"ByteCode.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">load</span>.<span class="title">ByteCode</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #4.#15         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = Fieldref           #3.#16         // load/ByteCode.i:I</span><br><span class="line">   #3 = Class              #17            // load/ByteCode</span><br><span class="line">   #4 = Class              #18            // java/lang/Object</span><br><span class="line">   #5 = Utf8               i</span><br><span class="line">   #6 = Utf8               I</span><br><span class="line">   #7 = Utf8               &lt;init&gt;</span><br><span class="line">   #8 = Utf8               ()V</span><br><span class="line">   #9 = Utf8               Code</span><br><span class="line">  #10 = Utf8               LineNumberTable</span><br><span class="line">  #11 = Utf8               compare</span><br><span class="line">  #12 = Utf8               StackMapTable</span><br><span class="line">  #13 = Utf8               SourceFile</span><br><span class="line">  #14 = Utf8               ByteCode.java</span><br><span class="line">  #15 = NameAndType        #7:#8          // "&lt;init&gt;":()V</span><br><span class="line">  #16 = NameAndType        #5:#6          // i:I</span><br><span class="line">  #17 = Utf8               load/ByteCode</span><br><span class="line">  #18 = Utf8               java/lang/Object</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> load.ByteCode();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: aload_0</span><br><span class="line">         <span class="number">5</span>: iconst_0</span><br><span class="line">         6: putfield      #2                  // Field i:I</span><br><span class="line">         <span class="number">9</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">5</span>: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compare</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: iconst_1</span><br><span class="line">         <span class="number">1</span>: istore_1</span><br><span class="line">         <span class="number">2</span>: iload_1</span><br><span class="line">         <span class="number">3</span>: bipush        <span class="number">100</span></span><br><span class="line">         <span class="number">5</span>: if_icmpge     <span class="number">24</span></span><br><span class="line">         <span class="number">8</span>: aload_0</span><br><span class="line">         <span class="number">9</span>: dup</span><br><span class="line">        10: getfield      #2                  // Field i:I</span><br><span class="line">        <span class="number">13</span>: iconst_1</span><br><span class="line">        <span class="number">14</span>: iadd</span><br><span class="line">        15: putfield      #2                  // Field i:I</span><br><span class="line">        <span class="number">18</span>: iinc          <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="number">21</span>: goto          <span class="number">2</span></span><br><span class="line">        <span class="number">24</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">10</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">8</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">18</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">24</span></span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">        frame_type = <span class="number">252</span> <span class="comment">/* append */</span></span><br><span class="line">          offset_delta = <span class="number">2</span></span><br><span class="line">          locals = [ <span class="keyword">int</span> ]</span><br><span class="line">        frame_type = <span class="number">21</span> <span class="comment">/* same */</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"ByteCode.java"</span></span><br></pre></td></tr></table></figure></li>
<li>.class文件中的主要结构<ol>
<li>Constant pool<figure class="highlight"><table><tr><td class="code"><pre><span class="line">  Constant pool:</span><br><span class="line"> #1 = Methodref          #4.#15         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line"> #2 = Fieldref           #3.#16         // load/ByteCode.i:I</span><br><span class="line"> #3 = Class              #17            // load/ByteCode</span><br><span class="line"> #4 = Class              #18            // java/lang/Object</span><br><span class="line"> #5 = Utf8               i</span><br><span class="line"> #6 = Utf8               I</span><br><span class="line"> #7 = Utf8               &lt;init&gt;</span><br><span class="line"> #8 = Utf8               ()V</span><br><span class="line"> #9 = Utf8               Code</span><br><span class="line">#10 = Utf8               LineNumberTable</span><br><span class="line">#11 = Utf8               compare</span><br><span class="line">#12 = Utf8               StackMapTable</span><br><span class="line">#13 = Utf8               SourceFile</span><br><span class="line">#14 = Utf8               ByteCode.java</span><br><span class="line">#15 = NameAndType        #7:#8          // "&lt;init&gt;":()V</span><br><span class="line">#16 = NameAndType        #5:#6          // i:I</span><br><span class="line">#17 = Utf8               load/ByteCode</span><br><span class="line">#18 = Utf8               java/lang/Object</span><br></pre></td></tr></table></figure></li>
<li>每一个方法的ByteCode</li>
</ol>
<ul>
<li>构造函数<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> load.ByteCode();</span><br><span class="line">descriptor: ()V</span><br><span class="line">flags: ACC_PUBLIC</span><br><span class="line">Code:</span><br><span class="line">stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">    <span class="number">0</span>: aload_0</span><br><span class="line">    1: invokespecial #1    // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">    <span class="number">4</span>: aload_0</span><br><span class="line">    <span class="number">5</span>: iconst_0</span><br><span class="line">    6: putfield      #2      // Field i:I</span><br><span class="line">    <span class="number">9</span>: <span class="keyword">return</span></span><br><span class="line">LineNumberTable:</span><br><span class="line">    line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">    line <span class="number">5</span>: <span class="number">4</span></span><br></pre></td></tr></table></figure></li>
<li>compare()<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compare</span><span class="params">()</span></span>;</span><br><span class="line">descriptor: ()V</span><br><span class="line">flags: ACC_PUBLIC</span><br><span class="line">Code:</span><br><span class="line">stack=<span class="number">3</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">    <span class="number">0</span>: iconst_1</span><br><span class="line">    <span class="number">1</span>: istore_1</span><br><span class="line">    <span class="number">2</span>: iload_1</span><br><span class="line">    <span class="number">3</span>: bipush        <span class="number">100</span></span><br><span class="line">    <span class="number">5</span>: if_icmpge     <span class="number">24</span></span><br><span class="line">    <span class="number">8</span>: aload_0</span><br><span class="line">    <span class="number">9</span>: dup</span><br><span class="line">    10: getfield      #2                  // Field i:I</span><br><span class="line">    <span class="number">13</span>: iconst_1</span><br><span class="line">    <span class="number">14</span>: iadd</span><br><span class="line">    15: putfield      #2                  // Field i:I</span><br><span class="line">    <span class="number">18</span>: iinc          <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="number">21</span>: goto          <span class="number">2</span></span><br><span class="line">    <span class="number">24</span>: <span class="keyword">return</span></span><br><span class="line">LineNumberTable:</span><br><span class="line">    line <span class="number">10</span>: <span class="number">0</span></span><br><span class="line">    line <span class="number">11</span>: <span class="number">8</span></span><br><span class="line">    line <span class="number">10</span>: <span class="number">18</span></span><br><span class="line">    line <span class="number">13</span>: <span class="number">24</span></span><br><span class="line">StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">    frame_type = <span class="number">252</span> <span class="comment">/* append */</span></span><br><span class="line">    offset_delta = <span class="number">2</span></span><br><span class="line">    locals = [ <span class="keyword">int</span> ]</span><br><span class="line">    frame_type = <span class="number">21</span> <span class="comment">/* same */</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>class文件内容分析<ul>
<li>常量池<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#1 = Methodref          #4.#15         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">#2 = Fieldref           #3.#16         // load/ByteCode.i:I</span><br><span class="line">#3 = Class              #17            // load/ByteCode</span><br><span class="line">#4 = Class              #18            // java/lang/Object</span><br><span class="line">#11 = Utf8               compare</span><br></pre></td></tr></table></figure>
关注常量池后，我们能够发现我们在java文件中定义的类文件信息。例如#1为类的构造函数，#2是字段i的引用，#3，#4是需要的类。#11是我们定义的compare方法的名字。这些引用都是符号引用，只有在JVM将类进行加载进内存后，该常量池会成变成运行时常量池，此时当使用到某一个符号引用时会转化为在内存中的直接引用(地址)</li>
<li>方法的字节码 <code>stack=3, locals=2, args_size=1</code>告诉JVM最大的操作数栈为3，局部变量表有2个slot，参数的大小为1。间接地，我们能够知道将java文件进行编译后就能够知道这些参数的大小。<br><img src="https://i.loli.net/2021/09/13/IXUdSp392QPWmnN.png" alt="stackframe.png"><figure class="highlight plain"><figcaption><span>iconst_1 1: istore_1```对局部变量进行初始化。</span></figcaption><table><tr><td class="code"><pre><span class="line">![opstack1.png](https:&#x2F;&#x2F;i.loli.net&#x2F;2021&#x2F;09&#x2F;13&#x2F;4k5fBTaGmFCudNI.png)</span><br><span class="line">&#96;&#96;&#96;2: iload_1 3: bipush        100 5: if_icmpge     24&#96;&#96;&#96; 将局部变量表1位置的变量放入栈中，将100放入栈中。bi表示8个字节的int型数值(8字节表示0-255，100在范围内)。栈中的两个数值进行比较，如果不为true，到达#24语句，即return。</span><br><span class="line">![compare.png](https:&#x2F;&#x2F;i.loli.net&#x2F;2021&#x2F;09&#x2F;13&#x2F;JNUGT2Q6ESMDviR.png)</span><br><span class="line">如果结果为true，那么执行</span><br><span class="line">    &#96;&#96;&#96;java</span><br><span class="line">    8: aload_0</span><br><span class="line">    9: dup</span><br><span class="line">    10: getfield      #2                  &#x2F;&#x2F; Field i:I</span><br><span class="line">    13: iconst_1</span><br><span class="line">    14: iadd</span><br><span class="line">    15: putfield      #2                  &#x2F;&#x2F; Field i:I</span><br><span class="line">    18: iinc          1, 1</span><br><span class="line">    21: goto          2</span><br></pre></td></tr></table></figure>
  首先将局部变量表的#0加载入操作数栈，复制一份。然后将字段i加载入栈，并将1放入栈中进行相加操作。将结果写回字段field。将局部变量表#1加载入栈，进行加一操作，返回#2字节码。<br><img src="https://i.loli.net/2021/09/13/cix2Wt8ST6HAMQD.png" alt="opstack2.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
  </entry>
  <entry>
    <title>ConcurrentHashMap源码笔记</title>
    <url>/2021/09/08/ConcurrentHashMap%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="putVal"><a href="#putVal" class="headerlink" title="putVal"></a>putVal</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br></pre></td></tr></table></figure>
<ul>
<li>ConcurrentHashMap中key和value不能为null</li>
</ul>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line"><span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">    <span class="comment">//对tab里的元素检查</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>获得key对应的hash值，获取table对table中的元素进行检查</li>
</ul>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果tab还未初始化或者容量为空，将tab进行初始化</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            tab = initTable();</span><br><span class="line">            <span class="comment">//tab已经初始化，但散列的位置为null，放入</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//利用for循环+CAS进行无锁的同步插入。</span></span><br><span class="line">        <span class="comment">// tab[i] is null then new Node return true otherwise return false</span></span><br><span class="line">        <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                        <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">            <span class="keyword">break</span>;                   </span><br><span class="line">            <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//?????</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">        tab = helpTransfer(tab, f);</span><br><span class="line">    <span class="comment">//tab不为null，同时散列到的第一个元素存在(产生了冲突),需要找到插入的位置</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//寻找插入的位置</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>寻找Node插入的位置(tab未初始化先初始化)</li>
</ul>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">V oldVal = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//获取首个Node的monitor，控制多线程并发</span></span><br><span class="line"><span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//遍历的过程中同时统计node结点的数量</span></span><br><span class="line">            binCount = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                K ek;</span><br><span class="line">                <span class="comment">//put的结点key已经存在</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((ek = e.key) == key ||</span><br><span class="line">                        (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                    oldVal = e.val;</span><br><span class="line">                    <span class="comment">//更新旧的数值</span></span><br><span class="line">                    <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                        e.val = value;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//Node在后续的链表中</span></span><br><span class="line">                Node&lt;K,V&gt; pred = e;</span><br><span class="line">                <span class="comment">//key不再链表中，那么生成新的Node并接入到链表的尾部</span></span><br><span class="line">                <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// f是已经转变成了一棵树</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">            Node&lt;K,V&gt; p;</span><br><span class="line">            binCount = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                            value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldVal = p.val;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                    p.val = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//如果链表的结点超过了th，那么treeify</span></span><br><span class="line">    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">        treeifyBin(tab, i);</span><br><span class="line">    <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> oldVal;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>寻找Node的位置并插入。使用synchronized获取首个结点的monitor，进行同步。</li>
</ul>
<hr>
<ul>
<li>Compare And Swap(Lock-free algorithm)<ul>
<li>Executes atomically</li>
<li>Implicit fence(instrunctions can’t reorder around it)</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java Basic</category>
      </categories>
  </entry>
  <entry>
    <title>Collection Framwork</title>
    <url>/2021/03/03/Framwork/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://i.loli.net/2021/03/03/eW1DvZ3nOi2w7EH.png" alt="interface.png"></p>
<center>

<p><img src="https://i.loli.net/2021/03/03/XYT47BfgRiWDPZ6.png" alt="Map.png"></p>
</center>

<h3 id="1-使用集合框架的优点"><a href="#1-使用集合框架的优点" class="headerlink" title="1. 使用集合框架的优点"></a>1. 使用集合框架的优点</h3><pre><code>(1) 具有相同接口的集合类所具备的方法名称相同
(2) 程序员无需过度关注集合类的设计
(3) 集合类的实现在进行数据处理时具备很高的效率
(4) 集合框架在java.util包中</code></pre><h3 id="2-Interface"><a href="#2-Interface" class="headerlink" title="2. Interface"></a>2. Interface</h3><ul>
<li>Interable: <strong>root interface</strong> for the entire collection.all the interfaces and classes implement this interface.为集合提供迭代器。<br>包含有一个方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Iterator <span class="title">iterator</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>Collection：被集合框架的其他接口或类implement。含有最基本的方法，例如add(),remove(),clear()等。</li>
<li>Set：无序集合，元素不能够重复出现。</li>
<li>List：dedicated to the data of the list type in which we can store all the ordered collection of the objects。将数据按照一定的顺序存储</li>
<li>Queue：dedicated to storing all the elements where the order of the elements matter。FIFO 先进先出原则</li>
<li>Deque：双端队列</li>
<li>Sorted Set：利用额外的方法保持元素的顺序。handle the data which needs to be sorted</li>
<li>Map：提供键值对存储。不支持重复的数据存储。<h3 id="3-Class"><a href="#3-Class" class="headerlink" title="3. Class"></a>3. Class</h3></li>
<li>ArrayList：Java中的动态数组,能够让我们随机访问数组中的元素。当我们需要对数组中的元素进行频繁的操作时提供帮助。</li>
<li>Vector：与ArrayList极为相似，不同点在于Vector是同步的，而ArrayList是异步的</li>
<li>LinkedList：相邻的元素在物理存储上可以不相邻。</li>
<li>Stack: 先进后出，是线程安全的</li>
<li>PriorityQueue：used when the objects are supposed to be processed based on the priority。based on the priority heap</li>
<li>ArrayDeque：a way to apply resizable-array，有双端队列的特性，可以从两端添加元素。</li>
<li>HashSet：使用<strong>哈希表</strong>的数据结构实现。元素根据其对应的哈希值插入。允许插入Null元素。不保证相同的元素插入时在同一个位置。使用了HashMap的机制</li>
<li>LinkedHashSet：使用<strong>双向链表</strong>实现，插入的数据保留插入的顺序。</li>
<li>TreeSet：使用树结构进行存储</li>
<li>HashMap：stores the data in (Key, Value) pairs.uses a technique called Hashing（converting a large String to small String）</li>
<li>TreeMap：</li>
</ul>
]]></content>
      <categories>
        <category>Java Basic</category>
      </categories>
  </entry>
  <entry>
    <title>Interface</title>
    <url>/2021/03/03/Interface/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ol>
<li>声明一些方法但不具体实现，同时也可以携带一些const常量。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span></span>&#123;</span><br><span class="line">    <span class="comment">//some methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>接口变量可以作为实现该接口的类的引用.</li>
<li>接口的默认method：具有默认的函数实现，实现接口的类无需对默认method进行具体实现。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Java Basic</category>
      </categories>
  </entry>
  <entry>
    <title>HelloSpringBoot</title>
    <url>/2020/07/15/HelloSpringBoot/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-SpringBoot的pom-xml"><a href="#1-SpringBoot的pom-xml" class="headerlink" title="1.SpringBoot的pom.xml"></a>1.SpringBoot的pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 形成可执行的jar包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1. 使用mvn -package在target中形成jar包--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2. 使用java -jar /jar包路径执行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-SpringBoot的主程序"><a href="#2-SpringBoot的主程序" class="headerlink" title="2.SpringBoot的主程序"></a>2.SpringBoot的主程序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>  <span class="comment">//标注一个主程序类，说明这是一个SpringBoot应用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将Spring应用启动</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-Controller层处理用户的请求"><a href="#3-Controller层处理用户的请求" class="headerlink" title="3.Controller层处理用户的请求"></a>3.Controller层处理用户的请求</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span> <span class="comment">//注入bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span> <span class="comment">//将返回值直接写入body中</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>) <span class="comment">//routing</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-pom文件分析"><a href="#3-pom文件分析" class="headerlink" title="3.pom文件分析"></a>3.pom文件分析</h3><h4 id="3-1-spring-boot-starter-parent-为依赖提供版本号"><a href="#3-1-spring-boot-starter-parent-为依赖提供版本号" class="headerlink" title="3.1 spring-boot-starter-parent - 为依赖提供版本号"></a>3.1 spring-boot-starter-parent - 为依赖提供版本号</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>该项目的pom文件继承自<strong>spring-boot-starter-parent</strong>，分析<strong>spring-boot-starter-parent</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们发现，<strong>spring-boot-starter-parent</strong>继承<strong>spring-boot-dependencies</strong>。<br>进入<strong>spring-boot-dependencies</strong>文件我们发现，这个文件为我们提供了部分依赖的版本号，因此我们在为SpringBoot项目导入依赖时，无需像Spring一样需要设置版本号。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 无&lt;version&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-2-spring-boot-starter-web-依赖"><a href="#3-2-spring-boot-starter-web-依赖" class="headerlink" title="3.2 spring-boot-starter-web 依赖"></a>3.2 spring-boot-starter-web 依赖</h4><p>进入该文件，我们发现该文件为我们导入了例如json、tomcat、spring-web、spring-webmvc等<strong>开发web应用所需要的依赖</strong>。</p>
<h4 id="3-3-spring-boot-starter-Spring-Boot场景启动器"><a href="#3-3-spring-boot-starter-Spring-Boot场景启动器" class="headerlink" title="3.3 spring-boot-starter - Spring Boot场景启动器"></a>3.3 spring-boot-starter - Spring Boot场景启动器</h4><p>Spring Boot将所有的功能场景抽取出来，做成一个个的starter，需要相关场景时，导入所需场景启动器，则该场景的依赖便会自动导入。</p>
<h4 id="3-4-spring-boot-maven-plugin-将Web应用打成jar包"><a href="#3-4-spring-boot-maven-plugin-将Web应用打成jar包" class="headerlink" title="3.4 spring-boot-maven-plugin - 将Web应用打成jar包"></a>3.4 spring-boot-maven-plugin - 将Web应用打成jar包</h4><p>使用该插件，能够直接将Web应用打成jar包，这样便能够直接在命令行中部署Web应用。</p>
<h3 id="4-主程序分析"><a href="#4-主程序分析" class="headerlink" title="4.主程序分析"></a>4.主程序分析</h3><p><img src="https://i.loli.net/2020/07/21/MAfGKyNk3sEthFT.jpg" alt="SpringBoot自动配置.jpg"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>Git基础</title>
    <url>/2021/03/03/Git%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-对现存的项目进行Git管理"><a href="#1-对现存的项目进行Git管理" class="headerlink" title="1. 对现存的项目进行Git管理"></a>1. 对现存的项目进行Git管理</h3><ol>
<li><code>git init</code>: 进入项目所在目录，使用命令 <code>git init</code>  该命令会在当前目录创建一个.git文件夹，所有 Git 需要的数据和资源都存放在这个文件夹中。</li>
<li><code>git add fileName</code>: 该命令命令告诉 Git 开始对某些文件进行跟踪，也可将文件放入暂存区中。</li>
<li><code>git commit -m message</code>: 该命令将跟踪的文件进行提交，同时增加一则提交信息</li>
<li><code>git status</code> 查看当前Git仓库的状态</li>
</ol>
<h3 id="2-克隆已有项目"><a href="#2-克隆已有项目" class="headerlink" title="2. 克隆已有项目"></a>2. 克隆已有项目</h3><ol>
<li><code>git clone [url]</code>: 对url地址的项目克隆到本地。</li>
</ol>
<h3 id="3-一次完整的提交"><a href="#3-一次完整的提交" class="headerlink" title="3. 一次完整的提交"></a>3. 一次完整的提交</h3><ol>
<li>当拥有git仓库后，我们需要指定哪些文件需要跟踪，哪些文件不需要跟踪。需要Git跟踪文件修改状态的文件使用```git add``命令进行添加。</li>
<li>当我们对跟踪的文件进行修改时，Git会察觉到这些变化。当我们将文件修改完成后，可以将该文件放入暂存区。此时文件的状态就由<code>modified</code>转变为<code>staged</code>。如果想要取消某些文件的暂存状态，可以使用<code>git reset HEAD file</code>将文件变为待暂存状态。</li>
<li>当我们完成所有的修改后，我们就可以使用<code>git commit -m message</code>将这些修改完成的文件进行提交。 <code>git commit -a</code> 将所有跟踪的文件都进行提交，即使一部分文件没有进行暂存。 <code>git commit --amend</code> 将修改最近一次提交</li>
</ol>
<p><img src="https://i.loli.net/2021/03/03/iE9XfMuFKyQJcjN.png" alt="lifecycle.png"></p>
<h3 id="4-忽略无需进行版本控制的文件"><a href="#4-忽略无需进行版本控制的文件" class="headerlink" title="4. 忽略无需进行版本控制的文件"></a>4. 忽略无需进行版本控制的文件</h3><ol>
<li>创建.gitignore文件，文件内容列出需要忽略的文件。</li>
<li>匹配：</br><code>*</code>: 匹配零个或多个任意字符</br><code>[abc]</code>:  匹配任何一个列在方括号中的字符 </br><code>?</code>: 只匹配一个任意字符</br><code>[0-9]</code>: 表示匹配所有 0 到 9 的数字</br><code>build/</code>: 忽略该目录下的所有文件</li>
</ol>
<h3 id="5-文件删除操作"><a href="#5-文件删除操作" class="headerlink" title="5. 文件删除操作"></a>5. 文件删除操作</h3><ol>
<li><code>git rm</code>: 删除项目中的文件,如果文件已经进行暂存，处于staged状态，则应该使用强制删除命令<code>git rm -f</code></li>
<li><code>git rm --cached  xxxfile</code>: 仅是从跟踪清单中删除,不会真正删除目标文件(不想要继续跟踪某个文件)</li>
</ol>
<h3 id="6-文件移动-重命名-操作"><a href="#6-文件移动-重命名-操作" class="headerlink" title="6. 文件移动(重命名)操作"></a>6. 文件移动(重命名)操作</h3><p> <code>git mv file1 file2</code>：将文件名file1重新命名为file2</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>Git原理与配置</title>
    <url>/2021/03/03/Git%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-Git如何进行版本控制"><a href="#1-Git如何进行版本控制" class="headerlink" title="1.Git如何进行版本控制"></a>1.Git如何进行版本控制</h3><pre><code>(1) 对改变的文件做一次快照，如果文件没有变化，则创建一个链接指向文件之前的快照。
(2) Git 在本地磁盘上保存着所有当前项目的历史更新
(3) 保存到 Git 之前，所有数据都要进行内容的校验和（checksum）计算</code></pre><h3 id="2-Git文件的三种状态"><a href="#2-Git文件的三种状态" class="headerlink" title="2.Git文件的三种状态"></a>2.Git文件的三种状态</h3><pre><code>(1) committed: 文件已经被保存在本地数据库中
(2) modified：文件被修改但还没提交
(3) staged：下次提交时要保存在本地数据库中的文件</code></pre><p>具体操作导致文件状态的转换<br><img src="https://i.loli.net/2021/03/03/zveoQsIAGHhupiy.png" alt="操作.png"></p>
<h3 id="3-Git的工作流程"><a href="#3-Git的工作流程" class="headerlink" title="3.Git的工作流程"></a>3.Git的工作流程</h3><pre><code>(1) 在工作目录中修改某些文件。
(2) 对修改后的文件进行快照，然后保存到暂存区域。
(3) 提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。</code></pre><h3 id="4-初次使用git进行的相关配置"><a href="#4-初次使用git进行的相关配置" class="headerlink" title="4.初次使用git进行的相关配置"></a>4.初次使用git进行的相关配置</h3><pre><code>(1) Git工作环境的相关变量只需配置一次
(2) 环境变量存储的三个位置：
    1. /etc/gitconfig: 所有用户都普遍适用的配置 
       使用git config --system读取配置
    2. ~/.gitconfig：用户目录下的配置文件只适用于该用户
       使用git config --global进行读取配置
    3. .git/config：配置仅仅针对当前项目有效
(3) 配置个人用户名和电子邮件地址
   1. git config --global user.name &quot;John Doe&quot;
   2. git config --global user.email johndoe@example.com
(4) 查看配置信息: git config --list</code></pre>]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>HashMap源码笔记</title>
    <url>/2021/09/02/HashMap%20%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="HashMap-源码笔记"><a href="#HashMap-源码笔记" class="headerlink" title="HashMap 源码笔记"></a>HashMap 源码笔记</h3><p>An instance of HashMap has two parameters that affect its performance: </p>
<ul>
<li><p>initial capacity</p>
</li>
<li><p>load factor</p>
</li>
<li><p>影响HashMap<strong>性能</strong>的两个参数：</p>
<ul>
<li><p>初始的<strong>capacity</strong></p>
<ul>
<li><strong>capacity</strong>描述的是Hash Table中的<strong>Bucket</strong>数量</li>
<li>初始的capacity是指Hash Table<strong>刚创建时</strong>的bucket的数量</li>
</ul>
</li>
<li><p><strong>负载因子</strong></p>
<ul>
<li><p>The load factor is a measure of how full the hash table is allowed to get before its capacity is automatically increased</p>
</li>
<li><p>衡量在容量（capacity）自动增加时，哈希表被填满的程度</p>
</li>
<li><p>当哈希表中的<strong>entry = 负载因子 * 容量</strong>时，会进行扩容操作，进行rehash（新的哈希表大概是原来哈希表容量的两倍）</p>
</li>
<li><p>负载因子的<strong>默认值</strong>为：0.75 （更高的值会降低空间上的考虑，但同时会带来查找上时间的消耗（get，put））</p>
</li>
<li><p>当设置了hashmap的初始capacity时，必须考虑负载因子的值。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>HashMap进行异步操作</p>
<ul>
<li><p>If multiple threads access a hash map concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally.</p>
</li>
<li><p>structural modification</p>
<ul>
<li>add mappings（添加）</li>
<li>delete mappings （删除）</li>
<li><strong>注意</strong>:修改某个key的mapping值，不是structural modification</li>
</ul>
</li>
</ul>
</li>
<li><p>源码阅读</p>
<ul>
<li><p>TreeNodes bins 和 regular bins</p>
<ul>
<li><p>TreeNodes bin的<strong>size</strong>是regular bin的两倍（<strong>占用更多的空间</strong>）</p>
</li>
<li><p>只有当bin中的node数量超过了<strong>TREEIFY_THRESHOLD</strong>,才会转变为TreeNodes bin</p>
</li>
<li><p>当map中的node不断移除后，树的结构会重新regular化</p>
</li>
<li><p>Because TreeNodes are about twice the size of regular nodes, we use them only when bins contain enough nodes to warrant use (see TREEIFY_THRESHOLD). And when they become too small (due to removal or resizing) they are converted back to plain bins.</p>
</li>
</ul>
</li>
<li><p>static final int DEFAULT_INITIAL_CAPACITY</p>
<ul>
<li>默认初始的容量：16，必须是2的幂次。</li>
</ul>
</li>
<li><p>static final int MAXIMUM_CAPACITY</p>
<ul>
<li>支持的最大的容量。当构造的hashmap超过了该容量，则会使用该值。默认为2的30次方。</li>
</ul>
</li>
<li><p>static final float DEFAULT_LOAD_FACTOR</p>
<ul>
<li>默认的负载因子，默认值为0.75</li>
</ul>
</li>
<li><p>static final int TREEIFY_THRESHOLD</p>
<ul>
<li>bin中node数量超过该值时，会将bin的结构转变成树。该值应该大于2并且最小为8.默认情况下为8.</li>
</ul>
</li>
<li><p>static final int UNTREEIFY_THRESHOLD</p>
<ul>
<li>将bin的树结构恢复回正常结构的阈值。应该比TREEIFY_THRESHOLD小，同时最大为6.默认情况下为6</li>
</ul>
</li>
<li><p>static final int MIN_TREEIFY_CAPACITY</p>
<ul>
<li>只有当hashmap的capacity的值超过该值时，才会考虑将bin中的nodes进行树形结构化。否则map会首先考虑进行扩容（可能是因为TreeNode的size更大的原因）。默认情况下该值为64.并且应该大于最少为4*TREEIFY_THRESHOLD。</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/02/GxnM1cIbTtBZqHP.png" alt="image-20210901100601720.png"></p>
<ul>
<li><p>HashMap的构造函数 – 初始化负载因子，同时根据capacity计算需要扩容的threshold</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>HashMap的getNode实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//整个hashtable</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//key --&gt; hash到table的第一个结点以及后续结点</span></span><br><span class="line">    Node&lt;K,V&gt; first, e; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//n table的长度  k结点的hash值</span></span><br><span class="line">    <span class="keyword">int</span> n; K k;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//table已经被初始化</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; </span><br><span class="line">        <span class="comment">// table里面已经有entry</span></span><br><span class="line">        (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        <span class="comment">// 根据hash进行hash获得的第一个Node不为null</span></span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="comment">//在结点的hash值相等并且key值相等的情况下返回node</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">//如果已经Treeify，那么调用另外的方法获取node</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="comment">//first结点不是想要的结点，那么对剩余的结点进行遍历</span></span><br><span class="line">            <span class="comment">//判断依据仍然是hash值相等的情况下，判断key是否也相等</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>关键点：</p>
<ul>
<li>hashtable是否已经被初始化？</li>
<li>hashtable是否有元素？</li>
<li>hash到的bin是否存在结点？</li>
<li>遍历这些结点，判断对应的hash值和key值是否相等</li>
</ul>
</li>
</ul>
</li>
<li><p>HashMap的putVal实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//hashtable</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab;</span><br><span class="line">    <span class="comment">//根据key hash得到的node</span></span><br><span class="line">    Node&lt;K,V&gt; p; </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">//如果刚开始hashtable的size为0，那么对其进行初始化</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果hash到的bin为空，那么在该位置放入新的Node结点</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果要放入的bin不为空，那么要判断是更新旧值还是插入新的Node</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">//如果要put的node是第一个结点，并且key已经存在</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">//要put的node是否存在于bin的其它结点当中？</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">//如果要put的结点不存在于后续的bin节点中，直接插入</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//后序插入</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        <span class="comment">//如果binCount超过了树形结构化的阈值，进行树形结构化</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果put的结点存在，那么取得该节点，退出</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对于已经存在的node，修改旧值为新值，返回旧值</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增加修改的次数（添加了新的结点），如果没有添加新的结点，则不必检查是否超过capacity</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">//如果超过了capacity * load factor 那么进行resize</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="comment">//old value为null，即插入了新的结点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>HashMap的resize实现:用于初始化map或者resize一个map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">  <span class="comment">//---获得取old map的属性---//</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">  <span class="comment">//-----------------------//</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//---新的map值---//</span></span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//---map不是第一次初始化---//</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                  oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//---如果是第一次初始化，那么oldThr描述下一次resize需要的值，不为0说明已经被设置---//</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//---两个值都为0，直接初始化两个数值---//</span></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//---数值初始化完成---//</span></span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//---新的map初始化---//</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//---如果old map有数据，需要将数据移动---//</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//--- 循环遍历整个capacity的空间 ---//</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="comment">//---某一个bin处存在Node结点 ---//</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//--- 释放节点，方便JVM回收 ---//</span></span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//--- 该bin只有一个Node---//</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="comment">//---将Node map到新的hash map中---//</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="comment">//---检查bin是不是已经Treeify---//</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="comment">//---没有Treeify，同时又含有多个Node，需要将这些Node进行移动---//</span></span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">//---不需要移动的Node,逐步向tail添加Node---//</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//---需要移动的Node,逐步向tail添加Node---//</span></span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">//挂在原来的J位置的Bin中</span></span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">//挂在J + oldCap位置的Bin中</span></span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>HashMap的removeNode实现</p>
<ul>
<li>关键点：hash到对应tab的位置后，如何查找目标node，以及找到后如何删除<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    判断需要移除的Node是否可能存在：</span></span><br><span class="line"><span class="comment">        1.table存在元素</span></span><br><span class="line"><span class="comment">        2. 根据hash值到达的位置存在Node</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         如果该位置有node，判断该node时不时target node</span></span><br><span class="line"><span class="comment">            1. 对应的hash值应该一致</span></span><br><span class="line"><span class="comment">            2. 对应的key值应该相等(hash值相等不代表key一致)</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            node = p;</span><br><span class="line">        <span class="comment">//如果bin的第一个位置不是需要移除的node，检查连接的其它node</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//树形结构的移除</span></span><br><span class="line">            <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">            链表结构的移除方法</span></span><br><span class="line"><span class="comment">            1. 不断比较链表结构上各个结点的key hash和key是否相等。</span></span><br><span class="line"><span class="comment">            2. 若相等，取出：node = e</span></span><br><span class="line"><span class="comment">            **/</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key ||</span><br><span class="line">                            (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        node = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拿到了需要移除的node，根据是否需要matchValue进行判断</span></span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                                (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">            <span class="comment">// 需要移除的结点是首个结点，直接用后续的结点覆盖</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                tab[index] = node.next;</span><br><span class="line">            <span class="comment">// node是需要移除的结点，p是node的前驱结点。断开连接</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p.next = node.next;</span><br><span class="line">            ++modCount;</span><br><span class="line">            --size;</span><br><span class="line">            afterNodeRemoval(node);</span><br><span class="line">            <span class="comment">// 返回移除的结点</span></span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>HashMap获取EntrySet,KeySet,Values的方式</p>
<ul>
<li>获取EntrySet：map.entrySet():Set –&gt; key都不同，导致Entry不会有相同</li>
<li>获取KeySet: map.keySet():Set –&gt; key是都不相同的值(相同的key会覆盖掉value)</li>
<li>获取Values: map.values():Collection –&gt; values可能会有重复值</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java Basic</category>
      </categories>
  </entry>
  <entry>
    <title>JVM垃圾回收</title>
    <url>/2021/09/10/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Java对象的引用分析"><a href="#Java对象的引用分析" class="headerlink" title="Java对象的引用分析"></a>Java对象的引用分析</h3><p>JVM会自动回收不再被使用的对象。而判断一个对象是否继续被使用，即判断该对象的引用是否在某一个地方被使用，需要判断对象的引用是否还存在。</p>
<ol>
<li>引用计数法</li>
</ol>
<ul>
<li>该方法统计每一个对象的引用次数。当没有其它地方引用该对象时，即引用次数为0时，回收该对象。但该算法存在一个问题，即某些对象已经不使用了，但是引用计数却不为零，没办法完成回收。例如对象之间的相互循环引用。<br><img src="https://i.loli.net/2021/09/10/5GXpgaboB64nZxz.png" alt="循环引用.png"><br>上图中，<strong>instanceA</strong>和<strong>instanceB</strong>互相引用，但是这两个对象已经没有引用能够访问到，无法释放之间的相互引用，因为引用计数不为0，对象内存无法释放，会造成内存泄漏。Java虚拟机不采取这种方法将对象进行回收。</li>
</ul>
<ol start="2">
<li>可达性分析</li>
</ol>
<ul>
<li>该方法维护一个GC Roots Set。凡是可以从该集合中的GC Roots到达的对象，都是目前还在使用的，有存在意义的对象。而那些无法由GC Roots到达的对象，都是需要回收的对象。<br><img src="https://i.loli.net/2021/09/10/ZwbNQt4T5Glae8d.png" alt="GC Roots.png"></li>
</ul>
<h3 id="JVM-垃圾收集器"><a href="#JVM-垃圾收集器" class="headerlink" title="JVM 垃圾收集器"></a>JVM 垃圾收集器</h3><h5 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h5><ol>
<li>Serial垃圾收集器</li>
<li>ParNew垃圾收集器</li>
<li>Parallel Scavenge垃圾收集器 – 吞吐量优先收集器</li>
</ol>
<hr>
<h5 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h5><ol>
<li><p>Serial Old垃圾收集器</p>
</li>
<li><p>Parallel Old垃圾收集器</p>
</li>
<li><p>CMS垃圾收集器 – 并发低停顿收集器<br>并发的可达性分析。当用户线程与垃圾收集器并发工作时，用户线程会改变某一些引用导致新垃圾的产生。而垃圾收集器没办法实时地反映出这一些变动。可能会导致两种问题的出现。</p>
</li>
</ol>
<ul>
<li>原本消亡的对象被标记为存活。这些垃圾被称为浮动垃圾，等待下一轮垃圾回收清除(CMS垃圾收集器可能产生的问题)</li>
<li>原本存活的对象被标记为消亡。此时程序将会出现问题。<br><img src="https://i.loli.net/2021/09/17/FwHMeKlfxbcjiX7.png" alt="并发可达性分析1.png"><br><img src="https://i.loli.net/2021/09/17/mBo5K3qTSICeN71.png" alt="并发可达性分析2.png"><br><img src="https://i.loli.net/2021/09/17/8amK3rRQnzbYHky.png" alt="并发可达性分析3.png"><br><img src="https://i.loli.net/2021/09/17/dClY27rMoKbyq9g.png" alt="并发可达性分析4.png"><br><img src="https://i.loli.net/2021/09/17/pZm9oLFYcv82Hbt.png" alt="并发可达性分析5.png"></li>
<li>解决办法：remark。将改变引用关系的黑色对象记录下来，待并发扫描结束后针对这写对象进行再次的扫描(CMS的做法)</li>
<li>CMS垃圾收集的过程<ul>
<li>STW</li>
<li>初始标记： 从GC Roots能够直接到达的对象</li>
<li>并发标记： 并发地进行可达性分析标记</li>
<li>STW</li>
<li>重新标记：修正并发过程中由于用户进程产生的引用修改导致的问题</li>
<li>并发清除：使用<strong>标记-清除</strong>算法进行垃圾回收。考虑到并发的情况，不能够移动对象。</li>
</ul>
</li>
<li>由于使用的是标记-清除算法，该算法虽然不需要移动对象，但是会产生内存碎片。最后可能导致无法为大对象分配连续的内存空间。此时可能会产生并发失败的问题，需要改用Full GC对整个堆进行一次回收。(CMS的备选方案通常是Serial Old)</li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
  </entry>
  <entry>
    <title>JavaMonitor</title>
    <url>/2021/09/15/JavaMoniter/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Synchronized字节码实现"><a href="#Synchronized字节码实现" class="headerlink" title="Synchronized字节码实现"></a>Synchronized字节码实现</h3><p>synchronized是Java的内置锁机制，在多线程编程中使用（Once the code is embedded with synchronized keyword, it is a monitor region）在实现方面，我们通过字节码能够观察出使用了JVM的指令monitorenter和monitorexit</p>
<h3 id="monitorenter"><a href="#monitorenter" class="headerlink" title="monitorenter"></a>monitorenter</h3><blockquote>
<p>Enter monitor for object.Each object is associated with a monitor. A monitor is locked if and only if it has an owner. The thread that <strong>executes monitorenter</strong> attempts to <strong>gain ownership</strong> of the monitor associated with objectref, as follows: </p>
</blockquote>
<ol>
<li>monitor’s entry count is 0.the thread enters the monitor and sets its entry count to one. The thread is then the owner of the monitor.</li>
<li>reenter the monitor,inc the count</li>
<li>another thread <strong>already owns</strong> the monitor,wait until entry count is 0.</li>
</ol>
<h3 id="monitorexit"><a href="#monitorexit" class="headerlink" title="monitorexit"></a>monitorexit</h3><blockquote>
<p>decrements the entry count of the monitor associated with objectref。if entry count is 0，the thread is no longer the owner of this object’s monitor and other threads blocking to the enter the monitor can attemp to enter the monitor.</p>
</blockquote>
<p><img src="https://i.loli.net/2021/09/15/e3EHtyshuACI8Oq.png" alt="monitorenter.png"></p>
]]></content>
      <categories>
        <category>Java MultiThreading</category>
      </categories>
  </entry>
  <entry>
    <title>JVM运行时数据区</title>
    <url>/2021/09/10/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="运行时数据区结构图（线程私有和共享区域）"><a href="#运行时数据区结构图（线程私有和共享区域）" class="headerlink" title="运行时数据区结构图（线程私有和共享区域）"></a>运行时数据区结构图（线程私有和共享区域）</h3><p><img src="https://i.loli.net/2021/09/10/Kv17wDTEcZCStAa.png" alt="运行时数据区.png"></p>
<h3 id="线程私有区域"><a href="#线程私有区域" class="headerlink" title="线程私有区域"></a>线程私有区域</h3><ol>
<li><p>PC程序计数器<br><img src="https://i.loli.net/2021/09/10/AaklqITnPCsGZif.png" alt="程序计数器.png"><br>线程在被调用后，执行的是一系列的方法。而这些方法在被编译器编译后以字节码的形式存在。因此，当线程需要执行某一个方法时，需要找到该方法<strong>字节码的地址</strong>，让虚拟机能够运行对应的指令。所以，需要有一个能够指示字节码地址的区域，该区域即为PC程序计数器。同时，在多线程调度的情况下，在进行线程切换时，PC能够记录当前线程执行到的某一个方法的位置，使得下一次恢复的时候能够继续对方法的后续部分执行。</p>
</li>
<li><p>虚拟机栈<br>线程在执行方法的过程中，虚拟机会对该方法生成一个栈帧，并将在栈帧压入到虚拟机栈中。每一个栈帧中存储局部变量表，操作数栈，动态连接和方法出口等信息.在对代码进行编译的过程中,我们已经直到了每一个局部变量的类型,因此我们就能够直到该局部变量所需要的内存空间.所以,在编译结束后,栈帧中的局部变量表的大小我们已经能够确定.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//localVar即为该方法的局部变量</span></span><br><span class="line">    <span class="keyword">double</span> localVar = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>栈帧中的局部变量表<br><img src="https://i.loli.net/2021/09/10/6AJEhlIpejaOvVM.png" alt="局部变量表.png"></p>
</li>
<li><p>本地方法栈<br>线程中调用的方法可能不只有使用Java声明的方法,可能会有其它的比如C声明的<strong>本地方法</strong>.这些方法没办法生成字节码,在调用的过程中需要使用额外的栈表示调用关系.本地方法栈为此类方法服务.</p>
</li>
</ol>
<h3 id="线程共享区域"><a href="#线程共享区域" class="headerlink" title="线程共享区域"></a>线程共享区域</h3><ol>
<li><p>Java堆<br>Java程序在运行的过程中,存在着许多的对象.随着程序的运行,会有新的对象的产生和旧的对象的灭亡.那么对象应该存储在哪里?在JVM中,对象<strong>几乎</strong>都是存放在Java堆中,由各个线程共享.因为对象可能会消亡,为了清空这一部分内存空间,需要GC对Java堆进行内存管理.有时候为了提高对象的分配效率,会为线程在该区域分配一个Buffer,称为Thread Local Allocation Buffer.(TLAB),该部分区域线程私有</p>
</li>
<li><p>方法区<br>目前,我们能够直到,调用的方法可以在虚拟机栈中得到,PC能够提供执行的字节码位置,有类生成的对象存放在Java堆中.而类本身的信息应该如何存放? 在JVM中,在内存中为类的信息提供了一个称为方法区的内存区域.该区域存储已经被虚拟机加载的类型信息,常量,静态变量,即时编译器编译后的代码缓存等</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
  </entry>
  <entry>
    <title>Java多线程:基础</title>
    <url>/2021/03/09/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="多线程编程方式"><a href="#多线程编程方式" class="headerlink" title="多线程编程方式"></a>多线程编程方式</h3><h4 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1. 继承Thread类"></a>1. 继承Thread类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Day1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-实现Runnable接口"><a href="#2-实现Runnable接口" class="headerlink" title="2. 实现Runnable接口"></a>2. 实现Runnable接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将实现Runnable接口的类作为参数传入Thread类中构造Thread.</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-使用匿名类"><a href="#3-使用匿名类" class="headerlink" title="3. 使用匿名类"></a>3. 使用匿名类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadExample3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-使用lambda表达式"><a href="#4-使用lambda表达式" class="headerlink" title="4. 使用lambda表达式"></a>4. 使用lambda表达式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">lambdaExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-Thread-Sleep"><a href="#5-Thread-Sleep" class="headerlink" title="5. Thread Sleep"></a>5. Thread Sleep</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String mainThreadName = Thread.currentThread().getName();</span><br><span class="line">        System.out.println(mainThreadName + <span class="string">"thread is running"</span>);</span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">          String threadName = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(threadName + <span class="string">" is running"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(threadName + <span class="string">" is sleeping"</span>);</span><br><span class="line">                <span class="comment">//sleep 2s</span></span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(threadName + <span class="string">" is finished"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建一个新的名为runnable thread的Thread</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable,<span class="string">"runnable thread"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---输出--------------------</span><br><span class="line">mainthread is running</span><br><span class="line">runnable thread is running</span><br><span class="line">runnable thread is sleeping</span><br><span class="line">runnable thread is finished</span><br><span class="line">----------------------------</span><br></pre></td></tr></table></figure>
<h4 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h4><p>只要JVM中还有一个线程在运行，即使main线程运行结束，JVM还会保持运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Day1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Daemon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"Running..."</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread myThread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        myThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        myThread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----输出----</span><br><span class="line">程序无法终止，持续输出Running</span><br><span class="line">------------</span><br><span class="line">如果想要main主程序终止时，其他线程也终止，则可以使用thread.setDaemon(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
<h4 id="7-Thread-Join"><a href="#7-Thread-Join" class="headerlink" title="7. Thread Join"></a>7. Thread Join</h4>]]></content>
      <categories>
        <category>Java MultiThreading</category>
      </categories>
  </entry>
  <entry>
    <title>ModernMemory</title>
    <url>/2021/09/16/ModernMemory/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Memory-Models-Today"><a href="#Memory-Models-Today" class="headerlink" title="Memory Models Today"></a>Memory Models Today</h3><blockquote>
<p>No modern-day processor implements sequential consistency.All implement some form of <strong>relaxed consistency</strong>.At that Memory Model,<strong>hardware</strong> actively reorders instructions and <strong>compilers</strong> may reorder instructions too. So the order of instructions in processor may not same as the order when processor is executed.(obtain higher performance by covering load latency)<br><img src="https://i.loli.net/2021/09/16/BiW4kj7oCtqKXre.png" alt="instruction reorder.png"></p>
</blockquote>
<h3 id="Prevent-instruction-reordering"><a href="#Prevent-instruction-reordering" class="headerlink" title="Prevent instruction reordering"></a>Prevent instruction reordering</h3><ul>
<li>Memory fence</li>
</ul>
]]></content>
      <categories>
        <category>Java MultiThreading</category>
      </categories>
  </entry>
  <entry>
    <title>Java多线程：MemoryModel</title>
    <url>/2021/03/09/Java%E5%A4%9A%E7%BA%BF%E7%A8%8BMemoryModel/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-多线程下的MemoryModel"><a href="#1-多线程下的MemoryModel" class="headerlink" title="1. 多线程下的MemoryModel"></a>1. 多线程下的MemoryModel</h3><p><img src="https://i.loli.net/2021/03/09/1WcJE2tjThzaUkl.png" alt="K2P89E_T41LUOI_K__~OBAX.png"></p>
<ul>
<li><p>该图有两个线程</p>
</li>
<li><p>每一个线程都拥有一个专属的Stack</p>
<ul>
<li>Thread只能访问自己的Stack</li>
<li>Stack存储Thread的Local Variables和    Reference</li>
</ul>
</li>
<li><p>线程间共用一个Heap</p>
<ul>
<li>Heap可以让各个Thread之间共享数据</li>
<li>Object存储在Heap中</li>
</ul>
</li>
</ul>
<h3 id="2-实例分析"><a href="#2-实例分析" class="headerlink" title="2. 实例分析"></a>2. 实例分析</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runnable1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">// 属于Runnable1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">this</span>.counter += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">": "</span> + <span class="keyword">this</span>.counter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main入口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemoryModelTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable1 runnable1 = <span class="keyword">new</span> Runnable1();</span><br><span class="line">        Runnable1 runnable2 = <span class="keyword">new</span> Runnable1();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(runnable1,<span class="string">"Thread 1"</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(runnable2,<span class="string">"Thread 2"</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<ul>
<li>总共有三个线程：main线程，thread1，thread2</li>
<li>main线程有4个reference，分别是runnable1，runnable2，thread1，thread2。存储在main线程的Stack中。有4个Object，分别对应各个引用所对应的Object，存储在Heap中。</li>
<li>Thread1线程：有一个counter的成员变量，该变量不是local variable，存储在Heap中。循环使用的i在run方法里，属于局部变量，因此存储在Stack中。</li>
<li>Thread2线程：有一个counter的成员变量，也存储在Heap中。run方法里的i存储在Stack中。<br><img src="https://i.loli.net/2021/03/09/LIPAy8S6M7fG4sR.png" alt="Snipaste_2021-03-09_21-59-17.png"></li>
</ul>
]]></content>
      <categories>
        <category>Java MultiThreading</category>
      </categories>
  </entry>
  <entry>
    <title>Object类源码阅读</title>
    <url>/2021/09/14/Object%E7%B1%BB%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Object类的方法"><a href="#Object类的方法" class="headerlink" title="Object类的方法"></a>Object类的方法</h3><p>因为Object是所有Java类的SuperClass，所以该类的所有方法其它类都有。</p>
<ul>
<li><p>getClass() — 是一个native方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Returns the runtime class of this Object.</p>
</blockquote>
</li>
<li><p>hashCode() — 是一个native方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回对象的哈希值。在应用执行的过程当中，hash值应该保持一致。hash值存储在对象头中，是对象的一部分。默认情况下，hash值的计算调用本地的c/c++方法，使用异或产生的随机值。当两个对象not equal时，这两个对象的hash值不一定不同，可以相同。但为了能够提高hashmap的性能，尽可能使用不同的hash值。</p>
</blockquote>
</li>
<li><p>equals() — 是JVM可以执行的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当重写equals方法时，hashcode方法也要进行重写，保证当两个obj equals时，hash code的值也是相等的。</p>
</blockquote>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/15/zaBbO1JitP9DuRS.png" alt="hashCode.png"></p>
<ul>
<li><p>clone() — 是一个native方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>浅拷贝，field涉及的引用的对象不会被clone。调用该方法时，该类需要实现Cloneable接口</p>
</blockquote>
</li>
<li><p>toString() — 是一个JVM可以执行的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>该方法返回一个Object的字符串表现形式。</p>
</blockquote>
</li>
<li><p>notify() — 是一个native方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>唤醒在该类对应实例上等待(调用了wait()方法)的某一个线程。如果有多个线程处于等待状态，那么随机唤醒一个线程。</p>
</blockquote>
</li>
<li><p>notifyAll() — 是一个native方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>唤醒所有在该类对应实例(调用了wait()方法)的线程。</p>
</blockquote>
</li>
<li><p>wait() — 其中的一个native实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>让当前的thread进入wait状态(添加入wait set)，等待其它线程notify进行唤醒或者是在一个timeout时间后自动唤醒</p>
</blockquote>
</li>
<li><p>wait() — 提供更加精确的timeout控制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>wait() — timeout为0的版本，需要在循环内使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    wait(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java Basic</category>
      </categories>
  </entry>
  <entry>
    <title>Java多线程中断机制</title>
    <url>/2021/10/18/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>There is no safe way to preemptively stop a thread in Java, and therefore no<br>safe way to preemptively stop a task.</p>
</blockquote>
]]></content>
      <categories>
        <category>Java MultiThreading</category>
      </categories>
  </entry>
  <entry>
    <title>RE-MulitThread</title>
    <url>/2020/09/27/RE-MulitThread/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-Java线程与其状态"><a href="#1-Java线程与其状态" class="headerlink" title="1.Java线程与其状态"></a>1.Java线程与其状态</h2><p><img src="https://i.loli.net/2020/09/27/B9iyDnAbtmMEJg2.png" alt="线程.png"></p>
<h3 id="2-创建线程的方式"><a href="#2-创建线程的方式" class="headerlink" title="2.创建线程的方式"></a>2.创建线程的方式</h3><h5 id="2-1-实现Runnable接口类的Task"><a href="#2-1-实现Runnable接口类的Task" class="headerlink" title="2.1 实现Runnable接口类的Task"></a>2.1 实现Runnable接口类的Task</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task01</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            System.out.printf(<span class="string">"hello world! Task01: %d\n"</span>,counter++);</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e)&#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task02</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)&#123;</span><br><span class="line">        System.out.printf(<span class="string">"hello world! Task02: %d\n"</span>,counter++);</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Task01()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Task02()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-2-使用Lambda表达式创建线程"><a href="#2-2-使用Lambda表达式创建线程" class="headerlink" title="2.2 使用Lambda表达式创建线程"></a>2.2 使用Lambda表达式创建线程</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable task = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">                        System.out.printf(<span class="string">"hello world! Task01: %d\n"</span>,counter++);</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (InterruptedException e)&#123; &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-3-执行结果"><a href="#2-3-执行结果" class="headerlink" title="2.3 执行结果"></a>2.3 执行结果</h5><p><img src="https://i.loli.net/2020/09/28/UjwsEdBoT2GhOFe.png" alt="多线程编程1.png"></p>
<ul>
<li>从执行结果中，我们可以看出多个线程执行Task的顺序是随机的。</li>
</ul>
<h3 id="3-利用锁与条件机制实现读者写者问题"><a href="#3-利用锁与条件机制实现读者写者问题" class="headerlink" title="3.利用锁与条件机制实现读者写者问题"></a>3.利用锁与条件机制实现读者写者问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="comment">//存储信息的管道</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pipe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock pipeLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition emptyCondition;</span><br><span class="line">    <span class="keyword">private</span> Condition fullCondition;</span><br><span class="line">    <span class="keyword">int</span> emptyBlocks = <span class="number">6</span>; <span class="comment">//初始可以写入的Blocks数量</span></span><br><span class="line">    <span class="keyword">int</span> fullBlocks = <span class="number">4</span>; <span class="comment">//初始已经写入的Blocks数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pipe</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//锁上的两个条件变量</span></span><br><span class="line">        emptyCondition = pipeLock.newCondition(); </span><br><span class="line">        fullCondition = pipeLock.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 申请Block Full资源</span></span><br><span class="line">            <span class="comment">// 进入临界区</span></span><br><span class="line">            pipeLock.lock();</span><br><span class="line">            <span class="keyword">while</span>(fullBlocks == <span class="number">0</span>)&#123;</span><br><span class="line">                fullCondition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"读取管道信息"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放Block Empty资源</span></span><br><span class="line">            ++emptyBlocks;</span><br><span class="line">            --fullBlocks;</span><br><span class="line">            emptyCondition.signalAll();</span><br><span class="line">            pipeLock.unlock();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//申请Block Empty资源</span></span><br><span class="line">            <span class="comment">//进入临界区</span></span><br><span class="line">            pipeLock.lock();</span><br><span class="line">            <span class="keyword">while</span>(emptyBlocks == <span class="number">0</span>)</span><br><span class="line">                emptyCondition.await();</span><br><span class="line">            System.out.println(<span class="string">"向管道写入数据"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放Block Full资源</span></span><br><span class="line">            ++fullBlocks;</span><br><span class="line">            --emptyBlocks;</span><br><span class="line">            fullCondition.signalAll();</span><br><span class="line">            pipeLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程调用，每个线程读写十次Pipe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pipe myPipe = <span class="keyword">new</span> Pipe();</span><br><span class="line">        Runnable readTask = () -&gt; &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">              myPipe.read();</span><br><span class="line">        &#125;;</span><br><span class="line">        Runnable writeTask = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)&#123;</span><br><span class="line">                myPipe.write();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> Thread(readTask).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(writeTask).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-1-运行结果"><a href="#3-1-运行结果" class="headerlink" title="3.1 运行结果"></a>3.1 运行结果</h3><center>

<p><img src="https://i.loli.net/2020/09/29/4w3rutDiPSGHn9I.png" alt="多线程编程2.png"></p>
</center>
]]></content>
      <categories>
        <category>Java MultiThreading</category>
      </categories>
  </entry>
  <entry>
    <title>MIT6824</title>
    <url>/2021/11/01/MIT6824/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>MITCourse</category>
      </categories>
  </entry>
  <entry>
    <title>Re:Arrays API</title>
    <url>/2020/06/26/Re-Arrays-API/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="直接打印整个数组"><a href="#直接打印整个数组" class="headerlink" title="直接打印整个数组"></a>直接打印整个数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.toString(array);</span><br></pre></td></tr></table></figure>

<h3 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] newArray = Arrays.copyOf(array,array.length);</span><br></pre></td></tr></table></figure>
<h3 id="局部拷贝"><a href="#局部拷贝" class="headerlink" title="局部拷贝"></a>局部拷贝</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] rangeArray = Arrays.copyOfRange(array,start,end);</span><br></pre></td></tr></table></figure>

<h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(array) - 使用了优化快排</span><br><span class="line"><span class="comment">// 对实现了Comparable接口的类进行排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> studentNum;</span><br><span class="line">    Student(String name,<span class="keyword">int</span> studentNum)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.studentNum = studentNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(<span class="keyword">this</span>.studentNum,o.studentNum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", studentNum="</span> + studentNum +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interface02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student[] students = &#123;<span class="keyword">new</span> Student(<span class="string">"cat"</span>,<span class="number">235</span>),<span class="keyword">new</span> Student(<span class="string">"carl"</span>,<span class="number">413</span>),<span class="keyword">new</span> Student(<span class="string">"jane"</span>,<span class="number">312</span>)&#125;;</span><br><span class="line">        Arrays.sort(students);</span><br><span class="line">        <span class="keyword">for</span> (Student student : students)&#123;</span><br><span class="line">            System.out.println(student + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改变排序方式，传入新的比较器，利用比较器进行排序。</span></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LengthComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.length() - o2.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interface01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] s = &#123;<span class="string">"321"</span>,<span class="string">"21"</span>,<span class="string">"1"</span>&#125;;</span><br><span class="line">        Arrays.sort(s,<span class="keyword">new</span> LengthComparator());</span><br><span class="line">        <span class="keyword">for</span> (String s1 : s)&#123;</span><br><span class="line">            System.out.print(s1 + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组二叉查找"><a href="#数组二叉查找" class="headerlink" title="数组二叉查找"></a>数组二叉查找</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> result = Arrays.binarySearch(array,num); <span class="comment">//查找到返回对应的索引值，如果没有找到则返回的值小于0</span></span><br></pre></td></tr></table></figure>

<h3 id="int-arr的初始化"><a href="#int-arr的初始化" class="headerlink" title="int[] arr的初始化"></a>int[] arr的初始化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java Basic</category>
      </categories>
  </entry>
  <entry>
    <title>Re-I/O</title>
    <url>/2020/09/25/Re-I-O/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="字节流与字符流读取过程"><a href="#字节流与字符流读取过程" class="headerlink" title="字节流与字符流读取过程"></a>字节流与字符流读取过程</h2><p><img src="https://i.loli.net/2020/09/25/m23StIJVFZe14rf.png" alt="IO.png"></p>
]]></content>
      <categories>
        <category>Java Basic</category>
      </categories>
  </entry>
  <entry>
    <title>Re:Inner Class</title>
    <url>/2020/06/29/Re-Inner-Class/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="使用内部类的原因"><a href="#使用内部类的原因" class="headerlink" title="使用内部类的原因"></a>使用内部类的原因</h2><ul>
<li>一般情况下同一个package的类互相可见，而内部类在同一个package中其他类不可见(<strong>hidden</strong>)</li>
<li>内部类的方法可以访问定义该内部类的类的所有数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkingClock</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> interval;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> beep;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TalkingClock</span><span class="params">(<span class="keyword">int</span> interval,<span class="keyword">boolean</span> beep)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;...&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimePrinter</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent event)</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"..."</span>);</span><br><span class="line">            <span class="keyword">if</span> (beep) &#123;...&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码运行过程</p>
<ul>
<li><p>创建一个TalkingClock实例 <code>TalkingClock myClock = new TalkingClock(1000,true);</code></p>
</li>
<li><p><code>myClock.start();</code> Clock开始运行</p>
</li>
<li><p>调用start方法发生了什么?</p>
<ul>
<li>创建一个内部类TimePrinter的实例<code>TimePrinter lisenter = new TimePrinter();</code></li>
<li>lisenter就是一个函数接口实例，传入Timer类调用运行</li>
</ul>
<p>如果不使用内部类会发生什么？</p>
<ul>
<li>TimePrinter类无法直接获取beep，我们可能需要为TalkingClock添加getBeep()方法。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java Basic</category>
      </categories>
  </entry>
  <entry>
    <title>Re:Lambda Expression</title>
    <url>/2020/06/29/Re-Lambda-Expression/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="lambda表达式与函数式接口"><a href="#lambda表达式与函数式接口" class="headerlink" title="lambda表达式与函数式接口"></a>lambda表达式与函数式接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LengthComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String first,String second)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first.length() - second.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> Arrays.sort(arr,<span class="keyword">new</span> LengthComparator());               (<span class="number">1</span>)</span><br><span class="line"> ---------------------------------------------------------------------------------</span><br><span class="line"> Arrays.sort(arr,(String first,String second) -&gt; first.length() - second.length());      (<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>上述代码块都能够实现按字符串长度对数组arr进行排序，但采用的方式却有所不同。其中(1)将一个<strong>实现了Comparator接口的实例</strong>传递给sort方法，而(2)则是将一个lambda表达式传递给sort方法。</p>
<p>能进行如此替换的要求：</p>
<ul>
<li>接口是一个函数式接口，即该接口只包含一个函数(<strong>an interface with a single abstract method</strong>)</li>
</ul>
<p>因此我们就能够见到如下的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;String&gt; comp = (String first,String second) -&gt; first.length() - second.length();</span><br></pre></td></tr></table></figure>

<h2 id="lambda表达式的使用时机-—–-deferred-execution"><a href="#lambda表达式的使用时机-—–-deferred-execution" class="headerlink" title="lambda表达式的使用时机  —– deferred execution"></a>lambda表达式的使用时机  —– deferred execution</h2><ul>
<li>多次使用代码块</li>
<li>在算法的某个特定点使用代码块 - 数组排序</li>
<li>发生某个事件后代码块被使用 - 按钮被点击时</li>
</ul>
<h2 id="函数式接口-配合lambda表达式使用"><a href="#函数式接口-配合lambda表达式使用" class="headerlink" title="函数式接口 - 配合lambda表达式使用"></a>函数式接口 - 配合lambda表达式使用</h2><ul>
<li>当接口的函数被调用时，lambda的表达式就被调用<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">repeat</span><span class="params">(<span class="keyword">int</span> n,Runnable action)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) action.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
上述代码 Runnable是一个<strong>函数式接口</strong>，我们可以传递一个lambda表达式给它，当接口实例action的run函数被调用时，对应的lambda表达式就被调用。我们可以使用下面的代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">repeat(<span class="number">10</span>,()-&gt; System.out.println(<span class="string">"hello world"</span>));</span><br></pre></td></tr></table></figure>
代码执行后，会打印10次 <code>hello world</code></li>
</ul>
<h2 id="常见的函数式接口-持续更新"><a href="#常见的函数式接口-持续更新" class="headerlink" title="常见的函数式接口 - 持续更新"></a>常见的函数式接口 - 持续更新</h2><table>
<thead>
<tr>
<th>函数式接口</th>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td><code>Comparator&lt;T&gt;</code></td>
<td><code>compare</code></td>
<td><code>可用于数组排序</code></td>
</tr>
<tr>
<td><code>ActionListener</code></td>
<td><code>actionPerformed</code></td>
<td><code>用于监听事件</code></td>
</tr>
<tr>
<td><code>Runnable</code></td>
<td><code>run</code></td>
<td><code>可用于多线程编程</code></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java Basic</category>
      </categories>
  </entry>
  <entry>
    <title>Reflection</title>
    <url>/2020/07/10/Reflection/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Reflection-Manipulate-Java-code-dynamically"><a href="#Reflection-Manipulate-Java-code-dynamically" class="headerlink" title="Reflection -  Manipulate Java code dynamically"></a>Reflection -  Manipulate Java code dynamically</h3><ul>
<li>A <strong>program</strong> that can <strong>analyze the capabilities of classes</strong> is called <strong>reflective</strong>. </li>
<li>使用反射我们可以<ul>
<li><ol>
<li><strong>Analyze</strong> the capabilities of classes <strong>at runtime</strong></li>
</ol>
</li>
<li><ol start="2">
<li>Inspect objects <strong>at runtime</strong></li>
</ol>
</li>
<li><ol start="3">
<li>Implement <strong>generic</strong> array manipulation code </li>
</ol>
</li>
<li><ol start="4">
<li>Take advantage of Method objects<h3 id="Java如何知道一个对象是属于哪个类的？"><a href="#Java如何知道一个对象是属于哪个类的？" class="headerlink" title="Java如何知道一个对象是属于哪个类的？"></a>Java如何知道一个对象是属于哪个类的？</h3><img src="https://i.loli.net/2020/07/10/3N6MElXLJxn9QKe.jpg" alt="ClassInformation.jpg"></li>
</ol>
</li>
</ul>
</li>
<li><strong>Class object</strong> 描述一个特定类的一些属性。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(e.getClass().getName());   <span class="comment">//此处将打印类名Employee</span></span><br></pre></td></tr></table></figure>
<h3 id="java-lang-reflect中的类-用于动态分析类"><a href="#java-lang-reflect中的类-用于动态分析类" class="headerlink" title="java.lang.reflect中的类,用于动态分析类"></a>java.lang.reflect中的类,用于动态分析类</h3></li>
<li>Field<ul>
<li>getType() 得到field type</li>
<li>get(Object)</li>
<li>setAccessible() 改变权限</li>
</ul>
</li>
<li>Method<ul>
<li>含有获取参数类型和返回类型的方法</li>
<li>invoke方法。可以call当前wrapped在Method中的方法</li>
</ul>
</li>
<li>Constructor<ul>
<li>含有获取参数类型的方法<h3 id="使用反射call-arbitrary-methods"><a href="#使用反射call-arbitrary-methods" class="headerlink" title="使用反射call arbitrary methods"></a>使用反射call arbitrary methods</h3></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>返回值</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>Class.getName()</td>
<td><code>String</code></td>
<td><code>返回类名</code></td>
</tr>
<tr>
<td>Class.forName(className)</td>
<td><code>Class</code></td>
<td><code>使用类名寻找类</code></td>
</tr>
<tr>
<td>Class.getConstructor()</td>
<td><code>Constructor</code></td>
<td><code>配合使用newInstance()</code></td>
</tr>
<tr>
<td>Class.newInstance()</td>
<td><code>Object</code></td>
<td><code>创建一个对象实例</code></td>
</tr>
<tr>
<td>Class.getResourceAsStream()</td>
<td><code>InputStream</code></td>
<td><code>利用类来定位file</code></td>
</tr>
<tr>
<td>Class.getFields()</td>
<td><code>public fields</code></td>
<td><code>Array of field</code></td>
</tr>
<tr>
<td>Class.getMethod(String name)</td>
<td><code>public methods</code></td>
<td><code>Array of methods</code></td>
</tr>
<tr>
<td>Class.getDeclaredField(“name”)</td>
<td><code>Field</code></td>
<td><code>获取类field为name，结合Field.get(Object)使用</code></td>
</tr>
<tr>
<td><img src="https://i.loli.net/2020/09/21/e12bB9phiHFcmnC.png" alt="Reflect01.png"></td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java Basic</category>
      </categories>
  </entry>
  <entry>
    <title>Re-String</title>
    <url>/2020/07/02/Re-String/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="String-不可变，拼接创建新的对象"><a href="#String-不可变，拼接创建新的对象" class="headerlink" title="String -不可变，拼接创建新的对象"></a>String -不可变，拼接创建新的对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String a = <span class="string">"Hello"</span>;</span><br><span class="line">String b = <span class="string">"World"</span>;</span><br><span class="line">a += b;</span><br></pre></td></tr></table></figure>
<p>最后a的打印值为HelloWorld，这是不是意味着a的值Hello直接发生了变化？执行过程如下图所示<br><img src="https://upload-images.jianshu.io/upload_images/9639303-a7dc3ce76afb694d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="String"><br>由上图可知，在a += b执行之后，引用变量a已经指向了一个新的对象而不是在原来Hello的基础上进行拼接。因此String是不可变的。</p>
<h2 id="StringBuilder-可以改变（待续）"><a href="#StringBuilder-可以改变（待续）" class="headerlink" title="StringBuilder - 可以改变（待续）"></a>StringBuilder - 可以改变（待续）</h2>]]></content>
      <categories>
        <category>Java Basic</category>
      </categories>
  </entry>
  <entry>
    <title>SSM整合</title>
    <url>/2020/07/14/SSM%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-创建Maven项目"><a href="#1-创建Maven项目" class="headerlink" title="1.创建Maven项目"></a>1.创建Maven项目</h3><h3 id="2-pom-xml导入依赖"><a href="#2-pom-xml导入依赖" class="headerlink" title="2.pom.xml导入依赖"></a>2.pom.xml导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Servlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--静态资源导出问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-在IDEA连接数据库"><a href="#3-在IDEA连接数据库" class="headerlink" title="3.在IDEA连接数据库"></a>3.在IDEA连接数据库</h3><p><img src="https://i.loli.net/2020/07/14/KdcRLS2TOknBgVA.jpg" alt="连接数据库.jpg"><br><font color="red" size=3>如果出现以下问题则需要修改TimeZone</font></p>
<p><img src="https://i.loli.net/2020/07/14/sLzT8onjF7UOZbP.jpg" alt="连接数据库出现的问题.jpg"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 打开cmd窗口输入</span><br><span class="line">mysql -hlocalhost -uroot -p</span><br><span class="line">2. 输入</span><br><span class="line">show variables like&#39;%time_zone&#39;;</span><br><span class="line">如果查询的结果为SYSTEM，则需要设置timezone</span><br><span class="line">3. 输入</span><br><span class="line">set time_zone &#x3D; &#39;+8:00&#39;;</span><br></pre></td></tr></table></figure>
<p>连接成功后选择对应的schema<br><img src="https://i.loli.net/2020/07/14/ar7fJQF2BojMZdE.jpg" alt="schemas.jpg"></p>
<h3 id="4-创建所需要的包"><a href="#4-创建所需要的包" class="headerlink" title="4.创建所需要的包"></a>4.创建所需要的包</h3><ul>
<li>com.xx.pojo</li>
<li>com.xx.dao</li>
<li>com.xx.service</li>
<li>com.xx.controller</li>
</ul>
<h3 id="4-在Resources创建所需要配置文件"><a href="#4-在Resources创建所需要配置文件" class="headerlink" title="4.在Resources创建所需要配置文件"></a>4.在Resources创建所需要配置文件</h3><ul>
<li>mybatis-config.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>applicationContext.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-关联数据库-database-properties"><a href="#5-关联数据库-database-properties" class="headerlink" title="5.关联数据库-database.properties"></a>5.关联数据库-database.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 如果使用Mysql8.0+ 还是配置时区&amp;serverTimeZone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?userSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="6-根据数据库在pojo中创建对象"><a href="#6-根据数据库在pojo中创建对象" class="headerlink" title="6.根据数据库在pojo中创建对象"></a>6.根据数据库在pojo中创建对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookID;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookCounts;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Books</span><span class="params">(<span class="keyword">int</span> bookID, String bookName, <span class="keyword">int</span> bookCounts, String detail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookID = bookID;</span><br><span class="line">        <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">        <span class="keyword">this</span>.bookCounts = bookCounts;</span><br><span class="line">        <span class="keyword">this</span>.detail = detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Books</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBookID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBookName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBookCounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookCounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDetail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookID</span><span class="params">(<span class="keyword">int</span> bookID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookID = bookID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookName</span><span class="params">(String bookName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookCounts</span><span class="params">(<span class="keyword">int</span> bookCounts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookCounts = bookCounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDetail</span><span class="params">(String detail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.detail = detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Books&#123;"</span> +</span><br><span class="line">                <span class="string">"bookID="</span> + bookID +</span><br><span class="line">                <span class="string">", bookName='"</span> + bookName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", bookCounts="</span> + bookCounts +</span><br><span class="line">                <span class="string">", detail='"</span> + detail + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-在dao层写接口"><a href="#6-在dao层写接口" class="headerlink" title="6.在dao层写接口"></a>6.在dao层写接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line">    <span class="comment">//删除一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//更新一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line">    <span class="comment">//查询一本书</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//查询全部的书</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-在dao层使用mybatis实现接口"><a href="#7-在dao层使用mybatis实现接口" class="headerlink" title="7.在dao层使用mybatis实现接口"></a>7.在dao层使用mybatis实现接口</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.cat.dao.BookMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBook"</span> <span class="attr">parameterType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        insert into ssmbuild.books (bookName,bookCounts,detail)</span><br><span class="line">        values (#&#123;bookName&#125;,#&#123;bookCount&#125;,#&#123;detail&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBookById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        delete from ssmbuild.books where bookID = #&#123;bookId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBook"</span> <span class="attr">parameterType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        update ssmbuild.books set bookName = #&#123;bookName&#125;,bookCounts=#&#123;bookCounts&#125;,detail=#&#123;detail&#125;</span><br><span class="line">        where bookID=#&#123;bookID&#125; ;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBookById"</span> <span class="attr">resultType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        select * from ssmbuild.books</span><br><span class="line">        where bookID = #&#123;bookId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAllBook"</span> <span class="attr">resultType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        select * from ssmbuild.books</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><font color="red" size=3>注意：如果之后运行出现org.apache.ibatis.binding.BindingException: Invalid bound statement (not found):考虑是否是该文件的位置错误，应该放在Resources文件夹下，创建/xx/xx/xxx于Mapper包一样的文件夹，然后放入</font></p>
<h3 id="8-将Mapper-xml绑定到mybatis-config-xml"><a href="#8-将Mapper-xml绑定到mybatis-config-xml" class="headerlink" title="8.将Mapper.xml绑定到mybatis-config.xml"></a>8.将Mapper.xml绑定到mybatis-config.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.cat.dao.BookMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9-写Service层"><a href="#9-写Service层" class="headerlink" title="9.写Service层"></a>9.写Service层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line">    <span class="comment">//删除一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//更新一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line">    <span class="comment">//查询一本书</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//查询全部的书</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// service调dao层</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookMapper = bookMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.addBook(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.deleteBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-用Spring整合dao层"><a href="#9-用Spring整合dao层" class="headerlink" title="9.用Spring整合dao层"></a>9.用Spring整合dao层</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1. 关联数据库配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:database.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.连接池 负责分配、管理和释放数据库连接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定Mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置dao接口扫描包，动态注入Dao接口到Spring容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描的dao包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.cat.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9-用Spring整合service层-创建spring-service-xml配置"><a href="#9-用Spring整合service层-创建spring-service-xml配置" class="headerlink" title="9.用Spring整合service层,创建spring-service.xml配置"></a>9.用Spring整合service层,创建spring-service.xml配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描Service下的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.cat.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--将所有类注入到Spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"BookServicImpl"</span> <span class="attr">class</span>=<span class="string">"com.cat.service.BookServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookMapper"</span> <span class="attr">ref</span>=<span class="string">"bookMapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明事务提交--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="10-增加Web支持"><a href="#10-增加Web支持" class="headerlink" title="10.增加Web支持"></a>10.增加Web支持</h3><p><img src="https://i.loli.net/2020/07/14/2XdtveDi37QGVC4.jpg" alt="增加Web支持.jpg"></p>
<h3 id="11-配置web-xml"><a href="#11-配置web-xml" class="headerlink" title="11.配置web.xml"></a>11.配置web.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ContextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 乱码过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Session --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="12-配置spring-mvc-xml"><a href="#12-配置spring-mvc-xml" class="headerlink" title="12.配置spring-mvc.xml"></a>12.配置spring-mvc.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         "</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 静态资源过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描包 controller --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.cat.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="13-写业务层"><a href="#13-写业务层" class="headerlink" title="13.写业务层"></a>13.写业务层</h3>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Spring-Core</title>
    <url>/2021/10/19/Spring-Core/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans.</p>
</blockquote>
<ul>
<li>bean由Spring IoC容器管理，是应用结构中的对象<blockquote>
<p>The org.springframework.context.ApplicationContext interface represents the Spring IoC container. After the ApplicationContext is created and initialized, you have a fully configured and executable system or application.</p>
</blockquote>
</li>
<li>Spring IoC 容器由ApplicationContext表示。容器控制bean的初始化，配置以及bean之间的依赖。</li>
<li>IoC容器根据配置信息，配置bean之间的关系。配置信息可以通过XML，注解获得。</li>
</ul>
<h3 id="Configuration-Metadata"><a href="#Configuration-Metadata" class="headerlink" title="Configuration Metadata"></a>Configuration Metadata</h3><ul>
<li>tell the Spring container to instantiate, configure, and assemble the objects in your application.</li>
</ul>
<ol>
<li>Use Annotation to configure spring container. <h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h4><blockquote>
<p>used to indicate that a method instantiates, configures, and initializes a new object to be managed by the Spring IoC container.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyService <span class="title">myService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyServiceImpl();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>方法返回一个MyServiceImpl bean，该bean会被container管理。</li>
<li>怎么表示Bean之间的dependency？利用方法的参数传入dependency.该方式称为构造函数依赖注入。</li>
<li>Specifying Bean Scope。定义一个Bean的Scope，可以使用@Scope注解。默认情况下Bean是单例模式的，可以切换为Prototype等模式。</li>
</ul>
<h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h4><blockquote>
<p>The class’s primary purpose is as a source of bean definitions</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//bean definitions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>定义bean</li>
</ul>
<h4 id="AnnotationConfigApplicationContext"><a href="#AnnotationConfigApplicationContext" class="headerlink" title="AnnotationConfigApplicationContext"></a>AnnotationConfigApplicationContext</h4><ul>
<li>一个具体的IoC容器。可以将配置类作为input初始化容器。在这个过程中配置类会生成一个Bean放入容器中，同时配置类中的@Bean对应的方法也会生成Bean放入容器中。</li>
<li>初始化：传入Component注解类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotationConfigApplicationContext</span><span class="params">(Class&lt;?&gt;... componentClasses)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>();</span><br><span class="line">	register(componentClasses);</span><br><span class="line">	refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>也可以手动注册Component<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Class&lt;?&gt;... componentClasses)</span> </span>&#123;</span><br><span class="line">	Assert.notEmpty(componentClasses, <span class="string">"At least one component class must be specified"</span>);</span><br><span class="line">	<span class="keyword">this</span>.reader.register(componentClasses);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://i.loli.net/2021/10/19/VgRnapvIq36m4wl.png" alt="SpringCore.png"></li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Servlet</title>
    <url>/2020/07/12/Servlet/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-什么是Servlet"><a href="#1-什么是Servlet" class="headerlink" title="1.什么是Servlet"></a>1.什么是Servlet</h2><ul>
<li>是sun公司开发动态web的一门技术</li>
<li>Servlet是一个接口</li>
<li>把实现了Servlet接口的Java程序叫做Servlet</li>
</ul>
<h2 id="2-HelloServlet"><a href="#2-HelloServlet" class="headerlink" title="2.HelloServlet"></a>2.HelloServlet</h2><p>Servlet接口Sun公司有两个默认的实现类(HttpServlet,GenericServlet)，只要继承了这两个类就自动implements Servlet接口。</p>
<center>

<p><img src="https://i.loli.net/2020/07/12/cFuRZsOrzPEL2bv.jpg" alt="Servlet.jpg"></p>
</center>
### 2.1构建一个Maven项目并导入依赖
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2创建一个新的Maven-webapp模块"><a href="#2-2创建一个新的Maven-webapp模块" class="headerlink" title="2.2创建一个新的Maven-webapp模块"></a>2.2创建一个新的Maven-webapp模块</h3><ul>
<li>注：在父项目中会有一个modules标签，在子模块中有一个parent标签，父项目的jar包子项目能够直接使用<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父项目 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--xxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子项目 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-3编写一个Servlet程序"><a href="#2-3编写一个Servlet程序" class="headerlink" title="2.3编写一个Servlet程序"></a>2.3编写一个Servlet程序</h3><ul>
<li>编写一个普通类</li>
<li>实现Servlet接口 - 直接继承HttpServlet</li>
<li>重写doGet和doPost方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.print(<span class="string">"Hello Servlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写Servlet映射 - 在web.xml中配置<ul>
<li>映射原因：访问的是web服务器，我们需要在web服务器中注册Servlet，所以需要给浏览器一个能够访问的路径<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注册Servlet --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.catty.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Servlet mapping --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>启动tomcat服务器</li>
</ul>
<h2 id="3-ServletContext"><a href="#3-ServletContext" class="headerlink" title="3.ServletContext"></a>3.ServletContext</h2><ul>
<li>Web容器在启动时，会为每一个Web程序都创建一个对应的ServletContext对象，代表当前的Web应用</li>
<li>应用：<ul>
<li>共享数据：在一个Servlet中的数据可以在另一个Servlet中拿到<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">String userName = <span class="string">"xx"</span>;</span><br><span class="line">context.setAttribute(<span class="string">"userName"</span>,userName); <span class="comment">//将一个数据保存在Servlet中</span></span><br><span class="line"><span class="comment">//可以在另一个Servlet中使用:context.getAttribute("userNmae")获取"xx"</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
  </entry>
  <entry>
    <title>RESTful风格</title>
    <url>/2020/07/13/RestFul%E9%A3%8E%E6%A0%BC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-使用传统的方式利用URL传递参数"><a href="#1-使用传统的方式利用URL传递参数" class="headerlink" title="1.使用传统的方式利用URL传递参数"></a>1.使用传统的方式利用URL传递参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span> <span class="comment">//自动装配</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// localhost:8080/hello/hi</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/h1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//从URL获取参数a，b</span></span><br><span class="line">        <span class="keyword">int</span> result = a+b;</span><br><span class="line">        <span class="comment">//封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"Result:"</span> + result);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>; <span class="comment">//返回视图的名字，被视图解析器处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">访问：http:<span class="comment">//localhost:8080/springmvc02_war_exploded/h1?a=1&amp;b=2</span></span><br><span class="line">结果: Result:<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="2-使用RESTful风格从URL传递参数"><a href="#2-使用RESTful风格从URL传递参数" class="headerlink" title="2.使用RESTful风格从URL传递参数"></a>2.使用RESTful风格从URL传递参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span> <span class="comment">//自动装配</span></span><br><span class="line"><span class="comment">// localhost:8080/hello</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// localhost:8080/hello/hi</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/h1/&#123;a&#125;/&#123;b&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@PathVariable <span class="keyword">int</span> a, @PathVariable <span class="keyword">int</span> b, Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//封装数据</span></span><br><span class="line">        <span class="keyword">int</span> result = a+b;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"Result:"</span> + result);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>; <span class="comment">//返回视图的名字，被视图解析器处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">访问:http:<span class="comment">//localhost:8080/springmvc02_war_exploded/h1/1/2</span></span><br><span class="line">结果: Result:<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>1,2对比我们可以看到传递参数的方式发现了改变。RESTful可以直接通过/划分传递参数。</p>
<h3 id="2-RESTful风格新增访问页面的方法"><a href="#2-RESTful风格新增访问页面的方法" class="headerlink" title="2.RESTful风格新增访问页面的方法"></a>2.RESTful风格新增访问页面的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/h1/&#123;a&#125;/&#123;b&#125;"</span>,method = RequestMethod.GET)</span><br></pre></td></tr></table></figure>
<p>通过修改RequestMethod.x我们可以修改请求该页面的方法</p>
<ul>
<li>RequestMethod.GET</li>
<li>RequestMethod.HEAD</li>
<li>RequestMethod.POS</li>
<li>RequestMethod.PUT</li>
<li>RequestMethod.PATCH</li>
<li>RequestMethod.DELETE</li>
<li>RequestMethod.OPTIONS</li>
<li>RequestMethod.TRACE</li>
</ul>
<p>也可通过别的注解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@GetMapping(name&#x3D;&quot;&#x2F;h1&#x2F;&#123;a&#125;&#x2F;&#123;b&#125;&quot;)</span><br><span class="line">@PostMapping(name&#x3D;&quot;&#x2F;h1&#x2F;&#123;a&#125;&#x2F;&#123;b&#125;&quot;)</span><br><span class="line">@DeleteMapping(name&#x3D;&quot;xxx&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="3-RESTful风格优点"><a href="#3-RESTful风格优点" class="headerlink" title="3.RESTful风格优点"></a>3.RESTful风格优点</h3><ul>
<li>简洁：路径简单</li>
<li>高效</li>
<li>安全：URL隐藏程序信息</li>
</ul>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot日志</title>
    <url>/2020/07/22/SpringBoot%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="常见的日志框架"><a href="#常见的日志框架" class="headerlink" title="常见的日志框架"></a>常见的日志框架</h3><table>
<thead>
<tr>
<th>日志门面(日志的抽象层)</th>
<th>日志实现</th>
</tr>
</thead>
<tbody><tr>
<td><del><strong>JCL</strong></del>  SLF4j  <del><strong>jboss-logging</strong></del></td>
<td>Log4j JUL(java.util.logging) Log4j2 Logback</td>
</tr>
</tbody></table>
<p>左边选一个抽象层，右边选一个实现<br>日志门面：SLF4j  JCL(版本太老)  jboss-logging(不适合普通程序员使用)<br>日志实现：Logback 适配SLF4j (SLF4j Logback Log4j同一个作者)</p>
<p>SpringBoot：选用SLF4j和Logback</p>
<h3 id="SLF4j的使用"><a href="#SLF4j的使用" class="headerlink" title="SLF4j的使用"></a><a href="http://www.slf4j.org/manual.html" target="_blank" rel="noopener">SLF4j</a>的使用</h3><h5 id="1-如何在系统中使用SLF4j"><a href="#1-如何在系统中使用SLF4j" class="headerlink" title="1.如何在系统中使用SLF4j"></a>1.如何在系统中使用SLF4j</h5><ul>
<li>日志记录方法的调用，不直接调用实现类而是调用日志抽象层的方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认使用Logback</span></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//获得记录器，传入需要记录的类</span></span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-SLF4j绑定各种实现"><a href="#2-SLF4j绑定各种实现" class="headerlink" title="2.SLF4j绑定各种实现"></a>2.SLF4j绑定各种实现</h5><img src="https://i.loli.net/2020/07/22/gjeQfD73P9rcTCs.jpg" alt="日志实现.jpg"><br>每一个日志的实现框架都有自己的配置文件，使用slf4j以后，配置文件使用对应的实现框架的本身的配置文件。</li>
</ul>
<h5 id="3-统一日志记录-统一别的框架使用的日志"><a href="#3-统一日志记录-统一别的框架使用的日志" class="headerlink" title="3.统一日志记录(统一别的框架使用的日志)"></a>3.统一日志记录(统一别的框架使用的日志)</h5><p><img src="https://i.loli.net/2020/07/22/15LDJgTskAu8WnC.jpg" alt="日志替换.jpg"></p>
<p>统一方法：</p>
<ul>
<li>1、系统中其他日志框架排除</li>
<li>2、用中间包替换排除的日志框架</li>
<li>3、导入slf4j其它实现</li>
</ul>
<h5 id="4-SpringBoot中的日志使用"><a href="#4-SpringBoot中的日志使用" class="headerlink" title="4.SpringBoot中的日志使用"></a>4.SpringBoot中的日志使用</h5><ul>
<li><strong>SpringBoot底层的依赖关系</strong><br><img src="https://i.loli.net/2020/07/22/V2amw74r93bYhHP.jpg" alt="日志依赖.jpg"><br>1）SprintBoot底层使用slf4j+logback做日志记录<br>2）SpringBoot也把其它日志替换成slf4j<br>3）如果我们引入了其他框架，要把这个框架默认的日志依赖移除</li>
<li><strong>日志的使用示例</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Slf4jtestApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 记录器</span></span><br><span class="line">    Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 日志的级别</span></span><br><span class="line">        <span class="comment">// 由低到高 trace &lt; debug &lt; info &lt; warn &lt; error</span></span><br><span class="line">        <span class="comment">// 可以调整输出的日志级别，只打印该级别及以后的日志</span></span><br><span class="line">        <span class="comment">// 级别调整：在properties文件中使用logging.level.com.seekyummy=trace改变为trace级别</span></span><br><span class="line">        <span class="comment">//还可以调整logging.path logging.file</span></span><br><span class="line">        <span class="comment">//logging.path指定日志的目录,默认使用spring.log作为日志记录文件，无需指定日志文件</span></span><br><span class="line">        <span class="comment">//logging.file=springboot.log  会将日志输出到该文件(默认输出到控制台)。</span></span><br><span class="line">        <span class="comment">//无该文件则会在当前路径先创建该文件。不指定路径则在当前项目下生成文件</span></span><br><span class="line">        logger.trace(<span class="string">"这是trace日志..."</span>);</span><br><span class="line">        logger.debug(<span class="string">"这是debug日志"</span>);</span><br><span class="line">        <span class="comment">// SpringBoot默认使用以下级别</span></span><br><span class="line">        logger.info(<span class="string">"这是info日志"</span>);</span><br><span class="line">        logger.warn(<span class="string">"这是warn日志..."</span>);</span><br><span class="line">        logger.error(<span class="string">"这是error日志"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringAOP</title>
    <url>/2020/07/10/SpringAOP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><ul>
<li><p>静态代理</p>
<ul>
<li>角色分析：<ul>
<li>抽象角色：一般会使用接口或抽象类来解决</li>
<li>真实角色：被代理的角色</li>
<li>代理角色：代理真实角色，代理后一般会做附属操作</li>
<li>客户：访问代理对象的人</li>
</ul>
</li>
<li>以租房为例<ul>
<li>抽象角色：房子出租</li>
<li>真实角色：房东</li>
<li>代理角色：中介</li>
<li>客户：需要租房的人</li>
<li>租房的人想找到房子，房东只想出租房子，不关心与租房无关的签合同，寻找租房的人等事情。中介可以代替房东做这些事情。<br><img src="https://i.loli.net/2020/07/10/Gsl7DHQ3ygrSjvM.jpg" alt="租房模型"></li>
<li>好处<ul>
<li>真实角色操作更加存粹，不用去关注公共的业务</li>
<li>公共业务交给了代理角色，实现了业务的分工</li>
<li>公共业务发生扩展的时候方便集中管理</li>
</ul>
</li>
<li>坏处<ul>
<li>一个真实角色会产生一个代理角色</li>
<li>代码量翻倍 效率变低<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//真实角色</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"房东要出租房子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//代理角色</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Host host;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        host.rent();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//可以拓展业务</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//客户</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            Host host = <span class="keyword">new</span> Host();</span><br><span class="line">            Proxy proxy = <span class="keyword">new</span> Proxy(host);</span><br><span class="line">            proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>动态代理</p>
<ul>
<li>角色与静态代理的角色一致</li>
<li>动态代理的代理类动态生成</li>
<li>动态代理类<ul>
<li>基于接口的动态代理类<ul>
<li>JDK动态代理</li>
</ul>
</li>
<li>基于类的动态代理类<ul>
<li>cglib</li>
</ul>
</li>
<li>java字节码</li>
</ul>
</li>
<li>Proxy 代理类<ul>
<li>Proxy.newProxyInstance()</li>
</ul>
</li>
<li>InvocationHandler - 接口<ul>
<li>实现该接口的类可以调用被代理得想的业务，动态返回代理</li>
<li>invoke()</li>
<li>getProxy()<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Rent接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//真实角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"房东要出租房子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(rent,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 客户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line">        ProxyInvocationHandler pih = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">        pih.setRent(host);</span><br><span class="line">        Rent proxy = (Rent) pih.getProxy();</span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>AOP - Aspect Oriented Programming concepts</strong></p>
<ul>
<li>Aspect: 被Pointcut切出的切面</li>
<li>Advice: 切面需要执行的动作</li>
<li>Point: 可进行切入的点</li>
<li>Pointcut: 切入动作，使用execution定位到切入点切入<br><img src="https://i.loli.net/2020/07/11/e92UqznvQSiBw1N.jpg" alt="AOP.jpg"><h3 id="Spring-API实现AOP"><a href="#Spring-API实现AOP" class="headerlink" title="Spring API实现AOP"></a>Spring API实现AOP</h3></li>
<li>导入依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>业务<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"增加了一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除了一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新了一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询了一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>MethodBeforeAdvice</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> method the method being invoked</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args the arguments to the method</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> target the target of the method invocation. May be &#123;<span class="doctag">@code</span> null&#125;.</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(target.getClass().getName()+<span class="string">"的"</span>+method.getName()+<span class="string">"被执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>AfterReturningAdvice</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> returnValue the value returned by the method, if any</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> method the method being invoked</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> args the arguments to the method</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> target the target of the method invocation. May be &#123;<span class="doctag">@code</span> null&#125;.</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了"</span>+method.getName()+<span class="string">"返回结果为"</span>+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注册到Spring</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.catty.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"log"</span> <span class="attr">class</span>=<span class="string">"com.catty.log.Log"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"afterLog"</span> <span class="attr">class</span>=<span class="string">"com.catty.log.AfterLog"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--切入点 在哪个地方执行--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--expression 表达式--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--execution() 要执行的位置--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- *:返回的类型 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- com.catty.service.UserServiceImpl.*(..)  .*:Impl类下的所有方法 (..):任意参数个数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"poincut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.catty.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--执行环绕--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--advice-ref:执行哪一个--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--pointcut-ref:哪里执行，切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"log"</span> <span class="attr">pointcut-ref</span>=<span class="string">"poincut"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"afterLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"poincut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        UserService service = (UserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        service.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行结果</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.catty.service.UserServiceImpl的add被执行了</span><br><span class="line">---------------------MethodBeforeAdvice</span><br><span class="line">增加了一个用户 ------ 切入点</span><br><span class="line">---------------------AfterReturningAdvice</span><br><span class="line">执行了add返回结果为<span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义实现AOP"><a href="#自定义实现AOP" class="headerlink" title="自定义实现AOP"></a>自定义实现AOP</h3><ul>
<li>自定义切面和对应的Advice<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Aspect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--------Before---------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--------After---------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在xml中配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aspect"</span> <span class="attr">class</span>=<span class="string">"com.catty.diy.Aspect"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"aspect"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.catty.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>执行结果<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--------Before---------</span><br><span class="line">增加了一个用户</span><br><span class="line">--------After---------</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="注解实现AOP"><a href="#注解实现AOP" class="headerlink" title="注解实现AOP"></a>注解实现AOP</h3><ul>
<li>xml配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aspect"</span> <span class="attr">class</span>=<span class="string">"com.catty.diy.UserAspect"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* com.catty.service.UserServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----annotation @Before---------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>执行结果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-----annotation @Before---------</span><br><span class="line">增加了一个用户</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot-Web开发</title>
    <url>/2020/07/23/SpringBoot-Web%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="SpringBoot对静态资源的映射规则"><a href="#SpringBoot对静态资源的映射规则" class="headerlink" title="SpringBoot对静态资源的映射规则"></a>SpringBoot对静态资源的映射规则</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">    CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">            customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">                .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">            &#125;</span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">            customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">                .addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">                .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>所有路径映射/webjars/**,都去classpath:/META-INF/resources/webjars/找资源</p>
<ul>
<li><p>webjars:以jar包的方式引入静态资源</p>
</li>
<li><p><a href="https://www.webjars.org/" target="_blank" rel="noopener">webjars网站</a></p>
</li>
<li><p>pom文件中导入对应的jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以访问该路径下的静态资源，访问路径: <a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js" target="_blank" rel="noopener">http://localhost:8080/webjars/jquery/3.5.1/jquery.js</a></p>
<center>

</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2020/07/23/IY8EQow23LM64Sb.jpg" alt="jquery.jpg"></p>
</center>

<ul>
<li>“/**” 除了webjars，访问当前项目的任何路径，去以下文件夹寻找<font color=red>（注意：resources也是类路径）</font><ul>
<li>classpath:/META-INF/resources/</li>
<li>classpath:/resources/</li>
<li>classpath:/static/</li>
<li>classpath:/public/<center>

</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2020/07/23/eXrl9hsT237ZBQg.jpg" alt="静态资源存放位置.jpg"></p>
</center>

<ul>
<li>默认首页映射:静态资源文件夹下的说有index.html，被”/**”映射。<ul>
<li>locallhost:8080/ —返回静态资源下的index.html</li>
</ul>
</li>
</ul>
<h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><ul>
<li><p>模板引擎起的作用：动态填充数据<br><img src="https://i.loli.net/2020/07/23/CUMAVZGWQ5EjpK9.jpg" alt="模板引擎用法.jpg"></p>
</li>
<li><p>Thymeleaf</p>
<ul>
<li><p>引入Thymeleaf</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>一些properties</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;</span><br><span class="line">   <span class="comment">//只要把html放在"classpath:/templates/"下，thymeleaf就能帮我们自动渲染</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<ul>
<li>导入thymeleaf的名称空间,使用语法提示<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>thymeleaf语法<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--将div中的文本值设置为$&#123;xxx&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;xxx&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>语法规则<ul>
<li>th:text 改变当前元素的文本内容</li>
<li>(th:任意html标签属性)，可以替换原标签中属性的值 如th:id=”${}” 将改变原标签的id值</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2020/07/23/HdEK5B6oNmw7GYD.jpg" alt="TH语法.jpg"></p>
<ul>
<li>语法 <ul>
<li>${} </li>
<li>*{} 配合th:object使用</li>
<li>#{} </li>
<li>@{} 定义url</li>
<li>~{} 片段引用表达式 fragment  片段复用</li>
</ul>
</li>
</ul>
<h3 id="SpringMVC自动配置"><a href="#SpringMVC自动配置" class="headerlink" title="SpringMVC自动配置"></a>SpringMVC自动配置</h3><ul>
<li><p>SpringBoot 自动配置好了SpringMVC</p>
<ul>
<li><p>实现好的默认配置</p>
<ul>
<li><p>ViewResolver：根据方法的返回值得到视图对象，视图对象决定如何渲染(转发？重对象)</p>
</li>
<li><p>我们可以给容器中添加视图解析器，ContentNegotiatingViewResolver会自动组合</p>
</li>
<li><p>自动注册了Converter，GenericConverter，Formatter</p>
<ul>
<li>Converter：转换器，在类型转换时使用</li>
<li>Formatter：格式化器，如字符串转换为日期</li>
</ul>
</li>
<li><p>ConfigurableWebBindingInitializer</p>
<ul>
<li>初始化WebDataBinder</li>
<li>可以自己给容器中添加一个替换默认 </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Web实战"><a href="#Web实战" class="headerlink" title="Web实战"></a>Web实战</h3><h4 id="首页映射"><a href="#首页映射" class="headerlink" title="首页映射"></a>首页映射</h4><ul>
<li>方法1：使用Controller</li>
</ul>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(&#123;<span class="string">"/"</span>,<span class="string">"/index.html"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>; <span class="comment">//thymeleaf 拼串：访问templates/index.html</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><ul>
<li>方法2：在config中配置WebMVC  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/index"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="修改html文件中的资源引用"><a href="#修改html文件中的资源引用" class="headerlink" title="修改html文件中的资源引用"></a>修改html文件中的资源引用</h4></li>
<li>初始引用方式 - 直接引用静态资源中的静态文件  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--公共资源，可以使用webjars引入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/signin.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br></pre></td></tr></table></figure>
上述引入了bootstrap.min.css文件，我们可以从bootstrap的jar包中获取该文件。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<center>

</li>
</ul>
<p><img src="https://i.loli.net/2020/07/25/Ow6FXamE4xrBusk.jpg" alt="webjars资源引入.jpg"></p>
</center>

<p>修改后</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span>  <span class="attr">th:href</span>=<span class="string">"@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/signin.css"</span>  <span class="attr">th:href</span>=<span class="string">"@&#123;/asserts/css/signin.css&#125;"</span>    <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样修改的好处：当项目发布时项目名修改后可以动态修改访问路径</p>
<h4 id="页面国际化-根据浏览器语言设置实现国际化"><a href="#页面国际化-根据浏览器语言设置实现国际化" class="headerlink" title="页面国际化(根据浏览器语言设置实现国际化)"></a>页面国际化(根据浏览器语言设置实现国际化)</h4><ul>
<li><p>编写国际化配置文件，抽取页面需要显示的国际化信息<br><img src="https://i.loli.net/2020/07/27/VQkclYnZKgs8NSa.jpg" alt="国际化配置文件.jpg"></p>
</li>
<li><p>SpringBoot自动配置好了管理国际化资源文件的组件</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.messages"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSourceProperties <span class="title">messageSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> MessageSourceProperties();</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//MessageSourceProperties类中有一个属性</span></span><br><span class="line">   <span class="keyword">private</span> String basename = <span class="string">"messages"</span>;</span><br><span class="line">   <span class="comment">// 我们可以在SpringBoot的配置文件中配置该属性，指示国际化文件的位置</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加basename</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.messages.basename</span>=<span class="string">i18n.login</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>去页面获取国际化的值(借助thymeleaf的#{})<br>  <img src="https://i.loli.net/2020/07/27/hNS1fLcCqyDX3wt.jpg" alt="thymeleaf.jpg"></p>
</li>
<li><p>出现乱码的解决办法：修改编码格式(utf-8 自动转为ascii)<br>  <img src="https://i.loli.net/2020/07/27/lrFSaYzjR6nKCes.jpg" alt="出现乱码的解决办法.jpg"></p>
</li>
</ul>
<h4 id="使用按钮切换国际化语言"><a href="#使用按钮切换国际化语言" class="headerlink" title="使用按钮切换国际化语言"></a>使用按钮切换国际化语言</h4><ul>
<li>原理：使用Locale(区域信息对象)  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"locale"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 默认情况下ACCEPT_HEADER不是FIXED</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">		&#125;</span><br><span class="line">       <span class="comment">// 默认进入该代码段</span></span><br><span class="line">	AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">       <span class="comment">// 使用Http请求获得Locale的信息</span></span><br><span class="line">       <span class="comment">//@Override public Locale resolveLocale(HttpServletRequest request) &#123;</span></span><br><span class="line">	localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">	<span class="keyword">return</span> localeResolver;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li>自己写LocaleResolver<ul>
<li>点击超链接时，request携带区域值<br>  <img src="https://i.loli.net/2020/07/27/IejuoZap47xPdsL.jpg" alt="携带参数.jpg"></li>
<li>自己的LocaleResolver  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">String l = request.getParameter(<span class="string">"l"</span>);</span><br><span class="line"><span class="comment">// 获得默认的Locale</span></span><br><span class="line">Locale locale = Locale.getDefault();</span><br><span class="line"><span class="comment">//如果参数值不是空的话</span></span><br><span class="line"><span class="keyword">if</span> (!StringUtils.isEmpty(l))&#123;</span><br><span class="line">    <span class="comment">// l = zh_CH 按_划分为zh CH</span></span><br><span class="line">    String[] s = l.split(<span class="string">"_"</span>);</span><br><span class="line">    <span class="comment">// 将zh CH传入Locale</span></span><br><span class="line">    locale = <span class="keyword">new</span> Locale(s[<span class="number">0</span>],s[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> locale;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>将自己的LocalResolver添加进Spring容器中  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="登录与阻拦"><a href="#登录与阻拦" class="headerlink" title="登录与阻拦"></a>登录与阻拦</h4><ul>
<li><p>登录</p>
<ul>
<li>表单请求  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用post请求提交表单，提交后的路径为/user/login--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"dashboard.html"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/user/login&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>Controller处理Post请求  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/user/login"</span>)</span><br><span class="line"> <span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username, @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password, Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(username) &amp;&amp; <span class="string">"123456"</span>.equals(password))&#123;</span><br><span class="line">        <span class="comment">//登录成功</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"dashboard"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//登录失败</span></span><br><span class="line">        map.put(<span class="string">"msg"</span>,<span class="string">"用户密码错误"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;&#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>开发技巧：模板引擎修改实时生效</p>
<ul>
<li>禁用缓存   <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure></li>
<li>(ctrl + f9) 重新编译对应页面</li>
</ul>
</li>
<li><p>错误消息提示</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123; not #strings.isEmpty(msg)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>表单重复提交解决：重定向</p>
<ul>
<li>在SpringMVC中配置视图映射  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registry.addViewController(<span class="string">"/main"</span>).setViewName(<span class="string">"dashboard"</span>);</span><br></pre></td></tr></table></figure></li>
<li>在Controller中重定向  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!StringUtils.isEmpty(username) &amp;&amp; <span class="string">"123456"</span>.equals(password))&#123;</span><br><span class="line">    <span class="comment">//登录成功</span></span><br><span class="line">    <span class="comment">//重定向</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/main"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>拦截器实现登录检查</p>
<ul>
<li><p>用户登录成功后，在session中记录用户名</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">               @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password,</span></span><br><span class="line"><span class="function">               Map&lt;String,Object&gt; map,</span></span><br><span class="line"><span class="function">               <span class="comment">//添加session参数记录值</span></span></span><br><span class="line"><span class="function">               HttpSession session)</span></span><br><span class="line"><span class="function">session.<span class="title">setAttribute</span><span class="params">(<span class="string">"loginUser"</span>,username)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>实现自己的拦截器</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span>  <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//目标方法执行之前</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//获取请求session中的用户</span></span><br><span class="line">    Object user = request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//没登录，返回登录页面</span></span><br><span class="line">        request.setAttribute(<span class="string">"msg"</span>,<span class="string">"没有权限，请先登录"</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/index"</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//已登录</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>SpringMVC中配置拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(</span><br><span class="line">    <span class="string">"/index"</span>,</span><br><span class="line">    <span class="string">"/"</span>,</span><br><span class="line">    <span class="string">"/user/login"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<h4 id="CURD操作"><a href="#CURD操作" class="headerlink" title="CURD操作"></a>CURD操作</h4><ul>
<li>添加员工<ul>
<li>到达添加员工的页面，GET<ul>
<li>页面跳转链接/emp</li>
<li>点击该链接的controller  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//来到员工添加页面add.html</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/emp"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAddPage</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    <span class="comment">//由于存储的是department的id，显示的是部门名称，所以需要提取处理。</span></span><br><span class="line">    Collection&lt;Department&gt; departments = departmentDao.getDepartments();</span><br><span class="line">    model.addAttribute(<span class="string">"depts"</span>,departments);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"emp/add"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>编辑新增员工信息，POST提交<ul>
<li>编辑新员工信息</li>
<li>点击添加提交信息<ul>
<li>form表单中的name属性应该与Post方法参数涉及的类的属性一致，这样SpringMVC就可以为我们自动封装.同时使用重定向的方式重新渲染员工添加页面  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//员工添加功能</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/emp"</span>)</span><br><span class="line"><span class="comment">// SpringMVC自动将请求参数和参数对象的属性进行一一绑定；请求参数的名字和javaBean对象的参数一致(Employee一致)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addEmp</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    <span class="comment">//保存员工</span></span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="comment">//redirect:重定向到一个地址,这里使用重定向，让/emps的映射方法处理</span></span><br><span class="line">    <span class="comment">//forward：转发到一个地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>提交的格式不对(如日期格式：y-m-d；y/m/d；y.m.d)<ul>
<li>SpringMVC页面提交的值需要转化为指定的类型(默认/)</li>
<li>可以在配置文件spring.mvc.data-format指定格式</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>员工信息修改<ul>
<li>点击编辑按钮到修改页面 Get  url:emp/id</li>
<li>在修改页面修改提交 Put  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/emp&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--需要发送put修改员工数据--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	0.传统表单只有post方式</span></span><br><span class="line"><span class="comment">	1.SpringMVC中配置HiddenHttpMethodFilter</span></span><br><span class="line"><span class="comment">	2.创建一个Post表单</span></span><br><span class="line"><span class="comment">	3.创建一个input项，name=“_method";值就是我们指定的请求方式</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"put"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;emp!=null&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>对应的Controller方法  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span>(<span class="string">"/emp"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateEmployee</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>员工删除<ul>
<li>使用DELETE请求删除员工信息  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/emp/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteEmployee</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>请求的URL为：emp/id  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"delete"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn-sm btn-danger"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>出现<code>post not support</code>时，注意需要在配置文件中开启：<code>spring.mvc.hiddenmethod.filter.enabled=true</code></li>
</ul>
</li>
</ul>
<h4 id="错误处理机制"><a href="#错误处理机制" class="headerlink" title="错误处理机制"></a>错误处理机制</h4><ul>
<li>SpringBoot默认的错误处理机制<ul>
<li>电脑客户端：返回一个错误页面<br>  <img src="https://i.loli.net/2020/07/29/DpvrZqgfjBizIGN.jpg" alt="错误页面.jpg"></li>
<li>其它客户端：json数据  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"timestamp"</span>: <span class="string">"2020-07-29T06:37:04.334+00:00"</span>,</span><br><span class="line"><span class="attr">"status"</span>: <span class="number">404</span>,</span><br><span class="line"><span class="attr">"error"</span>: <span class="string">"Not Found"</span>,</span><br><span class="line"><span class="attr">"message"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"path"</span>: <span class="string">"/main/aaa"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>原理参照<code>ErrorMvcAutoConfiguration</code>类，该类对错误处理进行自动配置<ul>
<li>该配置类为容器中添加了以下组件：<ul>
<li>DefaultErrorAttributes - 在页面共享信息(ErrorAttributes)，可以在模板引擎中提取<ul>
<li>timestamp：时间戳</li>
<li>status:状态码</li>
<li>error:错误提示</li>
<li>exception：异常对象</li>
<li>message：异常消息</li>
<li>errors：JSR303数据校验错误</li>
</ul>
</li>
<li>BasicErrorController</li>
<li>ErrorPageCustomizer</li>
<li>DefaultErrorViewResolver</li>
</ul>
</li>
<li>出错SpringBoot反应<ul>
<li>1.出现4xx、5xx错误，ErrorPageCustomizer就会生效，定制错误的相应规则，来到/error  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;error.path:/error&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String path = <span class="string">"/error"</span>;<span class="comment">//系统出现错误后来到/error请求处理</span></span><br></pre></td></tr></table></figure></li>
<li>2./error请求的处理：BasicErrorController，依据请求头分辨访问设备<ul>
<li>浏览器<br><img src="https://i.loli.net/2020/07/29/zqFlDncmi7vP5aE.jpg" alt="请求头.jpg"></li>
<li>其他设备<br><img src="https://i.loli.net/2020/07/29/pNQmzRfoLya3eDI.jpg" alt="其它设备.jpg"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@Controller</span></span><br><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  /*-------------------产生<span class="title">html</span>类型的数据----------------*/</span></span><br><span class="line"><span class="class">  //<span class="title">MediaType</span>.<span class="title">TEXT_HTML_VALUE</span> </span>= text/html</span><br><span class="line">  <span class="comment">// 浏览器发送请求时head里的accept中有该字段</span></span><br><span class="line">  <span class="meta">@RequestMapping</span>(produces = MediaType.TEXT_HTML_VALUE)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">      HttpStatus status = getStatus(request);</span><br><span class="line">      Map&lt;String, Object&gt; model = Collections</span><br><span class="line">              .unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));</span><br><span class="line">      response.setStatus(status.value());</span><br><span class="line">      <span class="comment">//去哪个页面作为错误页面</span></span><br><span class="line">      ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">      <span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/*-------------------产生json类型的数据，其它客户端使用该方法处理--------------------*/</span></span><br><span class="line">  <span class="meta">@RequestMapping</span></span><br><span class="line">  <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">      HttpStatus status = getStatus(request);</span><br><span class="line">      <span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(status);</span><br><span class="line">      &#125;</span><br><span class="line">      Map&lt;String, Object&gt; body = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(body, status);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>html方式的相应页面处理方法：获得所有的ErrorViewResolver得到所有的modelAndView<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">         <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">          HttpServletResponse response, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">             <span class="comment">//</span></span><br><span class="line">         <span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">             ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">             <span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 <span class="keyword">return</span> modelAndView;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure></li>
<li>ErrorViewResolver：是一个接口</li>
<li>DefaultErrorViewResolver实现了ErrorViewResolver,该类可以默认找到一个页面：error/{状态码}，如error/404<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultErrorViewResolver</span> <span class="keyword">implements</span> <span class="title">ErrorViewResolver</span>, <span class="title">Ordered</span> </span>&#123;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>定制错误响应<ul>
<li>有模板引擎：error/状态码（将错误页面命名为：错误状态码.html放在模板引擎里面的error文件夹下）状态码可以写成4xx,5xx来匹配以4或5开头的页面。</li>
<li>没有模板引擎(模板引擎找不到)：静态资源文件夹下寻找</li>
<li>以上都没有：来到SpringBoot的默认页面</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2020/07/29/vdPnB82XaHLEGsk.jpg" alt="错误处理流程.jpg"></p>
<h4 id="自定义错误Json数据"><a href="#自定义错误Json数据" class="headerlink" title="自定义错误Json数据"></a>自定义错误Json数据</h4><ul>
<li>记得引入配置  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.error.include-exception</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">server.error.include-message</span>=<span class="string">always</span></span><br></pre></td></tr></table></figure></li>
<li>自定义异常  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNotExitException</span>  <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserNotExitException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"用户不存在"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>异常处理器  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//浏览器客户端返回都是json</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UserNotExitException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Map</span>&lt;<span class="title">String</span>,<span class="title">Object</span>&gt; <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"code"</span>,<span class="string">"user.notexit"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>修改，使用SpringBoot的/error转发机制  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UserNotExitException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">request</span>)</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//转发成功 默认200，需要修改状态码</span></span><br><span class="line">        <span class="comment">//传入自己的状态码</span></span><br><span class="line">        request.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>,<span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">"code"</span>,<span class="string">"user.notexit"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">        <span class="comment">//转发到/error</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>携带定制数据<ul>
<li>重新一个ErrorController的实现类(AbstractErrorController的子类)放在容器中，避免自动配置</li>
<li>给容器中加入自己的ErrorAttributes(定制ErrorAttributes)  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, ErrorAttributeOptions options)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(webRequest,options);</span><br><span class="line">        map.put(<span class="string">"company"</span>,<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>添加Exception中map的信息<ul>
<li>将Exception中的map保存在request中  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setAttribute(<span class="string">"ext"</span>,map);</span><br></pre></td></tr></table></figure></li>
<li>在ErrorAttributes中取出  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, ErrorAttributeOptions options)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(webRequest,options);</span><br><span class="line">        map.put(<span class="string">"company"</span>,<span class="string">"hello"</span>);</span><br><span class="line">        <span class="comment">// 从request中取出之前保存的attribute</span></span><br><span class="line">        Map&lt;String,Object&gt; ext = (Map&lt;String,Object&gt;) webRequest.getAttribute(<span class="string">"ext"</span>,<span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">"ext"</span>,ext);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot-配置嵌入式Servlet容器</title>
    <url>/2020/08/03/SpringBoot-%E9%85%8D%E7%BD%AE%E5%B5%8C%E5%85%A5%E5%BC%8FServlet%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="默认嵌入式Servlet容器-Tomcat"><a href="#默认嵌入式Servlet容器-Tomcat" class="headerlink" title="默认嵌入式Servlet容器-Tomcat"></a>默认嵌入式Servlet容器-Tomcat</h3><h4 id="如何定制和修改Servlet容器的相关配置"><a href="#如何定制和修改Servlet容器的相关配置" class="headerlink" title="如何定制和修改Servlet容器的相关配置"></a>如何定制和修改Servlet容器的相关配置</h4><ol>
<li>修改和server有关的配置(ServerProperties配置类) <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.error.include-exception</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">server.error.include-message</span>=<span class="string">always</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="meta">//</span> <span class="string">通用的Servlet容器设置：server.xxx</span></span><br><span class="line"><span class="meta">//</span> <span class="string">Tomcat配置:server.tomcat.xxx</span></span><br></pre></td></tr></table></figure></li>
<li>编写一个WebServerFactoryCustomizer <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory&gt; <span class="title">webServerFactoryWebServerFactoryCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">            factory.setPort(<span class="number">8081</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Servlet三大组件"><a href="#Servlet三大组件" class="headerlink" title="Servlet三大组件"></a>Servlet三大组件</h4></li>
<li>注册Servlet<ul>
<li>ServletRegistrationBean<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写一个标准Servlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    doPost(req,resp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    resp.getWriter().write(<span class="string">"hello Servlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//配置</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean&lt;MyServlet&gt; <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用/myServlet访问时，用MyServlet进行处理</span></span><br><span class="line">    ServletRegistrationBean&lt;MyServlet&gt; servletRegistrationBean = <span class="keyword">new</span>  ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyServlet(),<span class="string">"/myServlet"</span>);</span><br><span class="line">    <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>注册Filter<ul>
<li>FilterRegistrationBean<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写一个自己的Filter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"MyFilter process.."</span>);</span><br><span class="line">    filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将Filter进行行为注册</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;MyFilter&gt; <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FilterRegistrationBean&lt;MyFilter&gt; registrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">    registrationBean.setFilter(<span class="keyword">new</span> MyFilter());</span><br><span class="line">    <span class="comment">// 访问这些路径时，Filter将会生效</span></span><br><span class="line">    registrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/hello"</span>,<span class="string">"/myServlet"</span>));</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>注册Listener<ul>
<li>ServletListenerRegistrationBean<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编写自己的Listener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"contextInitialized...web应用启动"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"contextDestroyed...web应用销毁"</span>);</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将Listener注册</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean&lt;MyListener&gt; <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletListenerRegistrationBean&lt;MyListener&gt; eventListenerServletListenerRegistrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyListener());</span><br><span class="line">    <span class="keyword">return</span> eventListenerServletListenerRegistrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://i.loli.net/2020/08/03/7e2ViSfAxCZKNGQ.jpg" alt="Listener.jpg"></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot配置</title>
    <url>/2020/07/21/SpringBoot%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="配置文件的作用"><a href="#配置文件的作用" class="headerlink" title="配置文件的作用"></a>配置文件的作用</h3><ul>
<li>修改SpringBoot自动配置的默认值(例如端口号8080)</li>
</ul>
<h3 id="两种配置文件"><a href="#两种配置文件" class="headerlink" title="两种配置文件"></a>两种配置文件</h3><ul>
<li><p>application.properties</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- server.port&#x3D;8081</span><br></pre></td></tr></table></figure></li>
<li><p>application.yml</p>
  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>基本语法</p>
<ul>
<li>key:(空格)value</li>
<li>空格的缩进控制层级关系 左对齐数据是同一个层级</li>
<li>属性和值大小写敏感</li>
</ul>
</li>
<li><p>值的写法</p>
<ul>
<li>字面量 普通的值(值，字符串，布尔值)<ul>
<li>k: value (直接写，且字符串不需要加引号)</li>
<li>加双引号””:转义特殊字符如”\n” 输出换行</li>
<li>加单引号’’:不会转义特殊字符’\n’ 输出\n</li>
</ul>
</li>
</ul>
</li>
<li><p>对象，Map(键值对)写法</p>
<ul>
<li><p>friends:(friends对象)</p>
<ul>
<li>属性: 值</li>
</ul>
</li>
<li><p>对象行内写法：Object: {Attribute: value,…}</p>
</li>
<li><p>数组的写法</p>
<ul>
<li>用- 值表示数组中的一个元素<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dog</span></span><br></pre></td></tr></table></figure></li>
<li>行内写法：pets: [cat,dog]</li>
</ul>
</li>
</ul>
</li>
<li><p>属性绑定注解@ConfigurationProperties(prefix=””)，结合@Component使用</p>
</li>
<li><p>导入依赖,配置文件进行绑定时就会有提示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h3><ul>
<li>${random.uuid} 随机的一串uid</li>
<li>${random.int} 随机的整数</li>
<li>${person.last-name}dog<ul>
<li>获取前面配置的person.last-name的值后拼接dog</li>
</ul>
</li>
<li>${person.last-name:xxx} 如果没有定义person.last-name，则使用默认值xxx</li>
</ul>
<h3 id="配置文件可以存储的位置"><a href="#配置文件可以存储的位置" class="headerlink" title="配置文件可以存储的位置"></a>配置文件可以存储的位置</h3><ul>
<li>file:./config/   <font color=red>优先级最高</font></li>
<li>file:./</li>
<li>classpath:/config/</li>
<li>classpath:/        <font color=red>优先级最低</font><center>

</li>
</ul>
<p><img src="https://i.loli.net/2020/07/22/tUoOP2F3Kx8YVus.jpg" alt="配置文件覆盖.jpg"></p>
</center>
- 高优先级的配置会覆盖低优先级的配置。只要某一个位置有配置文件就加载配置文件，如果出现一样的就进行覆盖。

<h3 id="配置文件可以配置的属性"><a href="#配置文件可以配置的属性" class="headerlink" title="配置文件可以配置的属性"></a>配置文件可以配置的属性</h3><ul>
<li><p><a href="https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/appendix-application-properties.html#common-application-properties" target="_blank" rel="noopener">SpringBoot配置属性网站</a></p>
</li>
<li><p>自动配置原理</p>
<ul>
<li>SpringBoot启动时加载了主配置类，开启了自动配置功能 @EnableAutoConfiguration</li>
<li><strong>HttpEncodingAutoConfiguration</strong>自动配置类解析<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)  <span class="comment">//表示这是一个配置类，可以给Spring容器中添加组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//启用ConfigurationProperties功能</span></span><br><span class="line"><span class="comment">//将配置文件中对应的值和ServerProperties绑定起来，同时将ServerProperties加入到IOC容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ServerProperties<span class="class">.<span class="keyword">class</span>) </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//进入<span class="title">ServerProperties</span>,出现如下注解</span></span><br><span class="line"><span class="class">@<span class="title">ConfigurationProperties</span>(<span class="title">prefix</span> </span>= <span class="string">"server"</span>, ignoreUnknownFields = <span class="keyword">true</span>) </span><br><span class="line"><span class="comment">// 该注解将配置文件中server的每一个属性的值映射到对应组件中</span></span><br><span class="line"><span class="comment">// 可以通过查看该类有什么属性来判断可以在配置文件中设置的值</span></span><br><span class="line"><span class="comment">// --------------类中部分属性------------------ //</span></span><br><span class="line"><span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Network address to which the server should bind.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"><span class="keyword">private</span> InetAddress address;</span><br><span class="line"><span class="comment">// ------------------------------------ //</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前是不是一个Web应用，如果是当前配置类生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = ConditionalOnWebApplication.Type.SERVLET)</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前项目有没有CharacterEncodingFilter这个类</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//判断配置文件中是否存在<span class="title">server</span>.<span class="title">servlet</span>.<span class="title">encoding</span>这个配置，如果没有也可以</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(<span class="title">prefix</span> </span>= <span class="string">"server.servlet.encoding"</span>, value = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p>通过上面不同的条件判断， 决定这个配置类是否生效，如果生效则向容器中添加相应的Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Encoding properties;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(ServerProperties properties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.properties = properties.getServlet().getEncoding();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span> <span class="comment">//给容器中添加一个组件</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span> <span class="comment">//没有Bean的情况下</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">		filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">		filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Encoding.Type.REQUEST));</span><br><span class="line">		filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Encoding.Type.RESPONSE));</span><br><span class="line">		<span class="keyword">return</span> filter;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>一旦配置类生效，配置类会给容器中添加各种组件。组件的属性是从对应的Properties类中获取的。而Properties类中的属性值是和配置文件绑定的。<br><img src="https://i.loli.net/2020/07/22/qGKQ8fZnLYhciEb.jpg" alt="精髓.jpg"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>TCP</title>
    <url>/2021/09/06/TCP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="为什么TCP需要使用ACK？"><a href="#为什么TCP需要使用ACK？" class="headerlink" title="为什么TCP需要使用ACK？"></a>为什么TCP需要使用ACK？</h3><ul>
<li>为了解决 <code>packet drop</code>的问题<ul>
<li><code>receiver</code>如何表示自己已经收到了所需要的packet？使用<code>ACK signal</code></li>
<li>当<code>sender</code>发送一个packet给<code>receiver</code>时，<code>sender</code>需要等待一个ACK才能知道自己发送的packet <code>receiver</code>已经正确接收</li>
<li>引入ACK会带来额外的问题<ul>
<li><code>sender</code>应该等待ACK的时间</li>
<li>如果ACK signal丢失了怎么办<ul>
<li>sender无法区分是ACK丢失了还是packet丢失了，重新发送packet。但此时receiver可能需要处理重复问题</li>
</ul>
</li>
<li>如果packet接收到，但是有错误，是否需要发送ACK？<ul>
<li>使用Code去检测错误。检测到错误，receiver不会发送ACK<h3 id="为什么TCP需要使用sequence-number？"><a href="#为什么TCP需要使用sequence-number？" class="headerlink" title="为什么TCP需要使用sequence number？"></a>为什么TCP需要使用sequence number？</h3></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><code>receiver</code>可以根据每一个packet中带有的序列号，判断该packet是否已经收到。如果是，那么就丢弃该packet，解决了重复接收的问题。</li>
</ul>
]]></content>
      <categories>
        <category>TCP/IP 详解</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2020/07/11/SpringMVC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="MVC架构"><a href="#MVC架构" class="headerlink" title="MVC架构"></a>MVC架构</h2><ul>
<li>M：Model<ul>
<li>业务逻辑</li>
<li>保存数据的状态</li>
</ul>
</li>
<li>V:View<ul>
<li>显示页面</li>
</ul>
</li>
<li>C:Controller<ul>
<li>取得表单数据</li>
<li>调用业务逻辑</li>
<li>转向指定的页面</li>
</ul>
</li>
</ul>
<h2 id="首次使用SpringMVC"><a href="#首次使用SpringMVC" class="headerlink" title="首次使用SpringMVC"></a>首次使用SpringMVC</h2><h3 id="项目导入依赖"><a href="#项目导入依赖" class="headerlink" title="项目导入依赖"></a>项目导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在web-xml中配置servlet"><a href="#在web-xml中配置servlet" class="headerlink" title="在web.xml中配置servlet"></a>在web.xml中配置servlet</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--绑定SpringMVC的配置文件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别为1，服务器启动就启动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            /:只匹配所有请求，不匹配jsp页面</span></span><br><span class="line"><span class="comment">            /*：会匹配所有请求，包括jsp</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在springmvc-servlet-xml中配置SpringMVC"><a href="#在springmvc-servlet-xml中配置SpringMVC" class="headerlink" title="在springmvc-servlet.xml中配置SpringMVC"></a>在springmvc-servlet.xml中配置SpringMVC</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理器映射器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="写一个Controller处理Request"><a href="#写一个Controller处理Request" class="headerlink" title="写一个Controller处理Request"></a>写一个Controller处理Request</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMVC</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>,<span class="string">"HelloSpringMVC"</span>);</span><br><span class="line">        mv.setViewName(<span class="string">"hello"</span>); <span class="comment">// /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="将Controller放入Spring容器"><a href="#将Controller放入Spring容器" class="headerlink" title="将Controller放入Spring容器"></a>将Controller放入Spring容器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"com.catty.hellomvc.HelloMVC"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置Tomcat-运行测试"><a href="#配置Tomcat-运行测试" class="headerlink" title="配置Tomcat 运行测试"></a>配置Tomcat 运行测试</h3><p><font color="orange" size=4>出现404错误解决办法</font></p>
<ul>
<li>依据控制台查看是否缺少jar包</li>
<li>jar包存在，在项目发布中添加lib依赖</li>
<li>重启tomcat<center>

</li>
</ul>
<p><img src="https://i.loli.net/2020/07/13/ehsZW8p695DfTyH.jpg" alt="WEB-INF.jpg"></p>
</center>
修改后
<center>

<p><img src="https://i.loli.net/2020/07/13/3u8cHXJ9vl5AUpW.jpg" alt="lib.jpg"></p>
</center>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><img src="https://i.loli.net/2020/07/13/Di98hHTWya4dlvn.jpg" alt="SpringMVC配置.jpg"></p>
<h3 id="SpringMVC处理流程"><a href="#SpringMVC处理流程" class="headerlink" title="SpringMVC处理流程"></a>SpringMVC处理流程</h3><p><img src="https://i.loli.net/2020/07/13/GfX2AnbRTE7heo5.jpg" alt="SpringMVC处理流程.jpg"></p>
<h3 id="SpringMVC-Demo构建步骤"><a href="#SpringMVC-Demo构建步骤" class="headerlink" title="SpringMVC Demo构建步骤"></a>SpringMVC Demo构建步骤</h3><p>(1) 写好需要访问的View页面<br>(2) 在web.xml中配置好DispatcherServlet<br>(3) 将DispatherServlet绑定Spring配置文件<br>(4) 配置Spring配置文件<br>    - 处理器映射器<br>    - 处理器适配器<br>    - 视图解析器<br>    - Controller</p>
<p>(6) 写Controller</p>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title>String相关</title>
    <url>/2021/09/10/String%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="String的-运算符"><a href="#String的-运算符" class="headerlink" title="String的+运算符"></a>String的+运算符</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"aaa"</span>+<span class="string">"bbb"</span>;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>直接使用常量相加，在编译期间将两个字符串常量合并成一个字符串</li>
<li>.class文件<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"aaabbb"</span>;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>含有一个String对象和一个字符串常量<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"aaa"</span>;</span><br><span class="line">    String str2 = str + <span class="string">"bbbn"</span>;</span><br><span class="line">    System.out.println(str2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>对应的字节码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">0 ldc #2 &lt;aaa&gt;</span><br><span class="line"><span class="number">2</span> astore_1</span><br><span class="line">3 new #3 &lt;java/lang/StringBuilder&gt;</span><br><span class="line"><span class="number">6</span> dup</span><br><span class="line">7 invokespecial #4 &lt;java/lang/StringBuilder.&lt;init&gt;&gt;</span><br><span class="line"><span class="number">10</span> aload_1</span><br><span class="line">11 invokevirtual #5 &lt;java/lang/StringBuilder.append&gt;</span><br><span class="line">14 ldc #6 &lt;bbbn&gt;</span><br><span class="line">16 invokevirtual #5 &lt;java/lang/StringBuilder.append&gt;</span><br><span class="line">19 invokevirtual #7 &lt;java/lang/StringBuilder.toString&gt;</span><br><span class="line"><span class="number">22</span> astore_2</span><br><span class="line">23 getstatic #8 &lt;java/lang/System.out&gt;</span><br><span class="line"><span class="number">26</span> aload_2</span><br><span class="line">27 invokevirtual #9 &lt;java/io/PrintStream.println&gt;</span><br><span class="line"><span class="number">30</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure></li>
<li>我们可以看到，在这个过程中，Java对+的重载实现是new了一个StringBuilder，然后调用StringBuilder的append进行字符串拼接，最后在调用toString()方法生成对应的String</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java Basic</category>
      </categories>
  </entry>
  <entry>
    <title>Tomcat</title>
    <url>/2020/07/12/Tomcat/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-Tomcat的主要作用"><a href="#1-Tomcat的主要作用" class="headerlink" title="1.Tomcat的主要作用"></a>1.Tomcat的主要作用</h2><p><img src="https://i.loli.net/2020/07/12/TQ8qwO2iZ3bmDPn.jpg" alt="Tomcat.jpg"></p>
<ul>
<li>用户通过互联网给服务器发送一个Request请求，请求某种资源</li>
<li>Request到达服务器后，利用Tomcat拿到需要的资源</li>
<li>服务器将拿到的资源通过互联网返回给用户一个Response</li>
</ul>
<h2 id="2-Tomcat配置"><a href="#2-Tomcat配置" class="headerlink" title="2.Tomcat配置"></a>2.Tomcat配置</h2><h3 id="2-1-服务器核心配置文件-conf-serve-xml"><a href="#2-1-服务器核心配置文件-conf-serve-xml" class="headerlink" title="2.1 服务器核心配置文件 - conf/serve.xml"></a>2.1 服务器核心配置文件 - conf/serve.xml</h3><ul>
<li>可以修改端口号,默认端口号80<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">executor</span>=<span class="string">"tomcatThreadPool"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>修改主机名<ul>
<li>默认的主机名为localhost</li>
<li>默认的appBase为webapps</li>
<li>注：Win10下C:\Windows\System32\drivers\etc中的hosts文件，里面配置了本地域名映射<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="2-2-发布一个web网站"><a href="#2-2-发布一个web网站" class="headerlink" title="2.2 发布一个web网站"></a>2.2 发布一个web网站</h3><ul>
<li>将自己写的网站放到Tomcat服务器中指定的webapps文件夹(appbase)就可以访问了<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--webapps</span><br><span class="line">   - ROOT - </span><br><span class="line">   - 网站名目录</span><br><span class="line">       - index.html 访问页面</span><br><span class="line">       - WEB-INF</span><br><span class="line">           - web.xml 网站配置文件</span><br><span class="line">           - lib：网站所依赖的jar包</span><br><span class="line">           - classes：Java程序</span><br><span class="line">       - <span class="keyword">static</span> 静态资源</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ul>
<li>java.lang.IllegalStateException: 无输出目录<ul>
<li>tomcat权限不够，提高tomcat文件夹的权限：属性-&gt;安全-&gt;Users-&gt;编辑-&gt;完全控制</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo博客搭建</title>
    <url>/2020/04/29/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="初始工具的准备"><a href="#初始工具的准备" class="headerlink" title="初始工具的准备"></a>初始工具的准备</h1><h2 id="Node-js下载"><a href="#Node-js下载" class="headerlink" title="Node.js下载"></a>Node.js下载</h2><p>Hexo的搭建首先需要下载Node.js 直接在官网下载的速度十分缓慢，因此这里使用<a href="https://npm.taobao.org/mirrors/node" target="_blank" rel="noopener">淘宝NPM镜像</a>下载。在该网站选择合适的版本进行下载。需要注意，这里如果选择最新的Nodejs14版本的话，会产生<br><img src="https://note.youdao.com/yws/public/resource/85bfde07310e4e81fdbe68ab5f7e5dfc/xmlnote/B870548B24434A7E9057A6BDE5942709/4048" alt="Nodejs产生的问题">因此，我们在选择版本时选择Node.js13的版本。安装完成后在命令行输入 <code>node -v</code> 如果命令行出现版本号则表示安装成功</p>
<h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><ul>
<li>首先创建一个初始文件夹blog，并cd进该文件夹</li>
<li>在该文件夹下输入命令<code>npm i -g hexo</code></li>
<li>同样可以在命令行使用命令<code>hexo -v</code>检查版本查看是否安装成功</li>
</ul>
<h1 id="本地运行Hexo博客"><a href="#本地运行Hexo博客" class="headerlink" title="本地运行Hexo博客"></a>本地运行Hexo博客</h1><ul>
<li><code>hexo -init</code>    得到多个初始目录文件</li>
<li>hexo 3.0把服务器独立成个别模块，需要单独安装:<code>npm i hexo-server</code></li>
<li><code>hexo server</code> 启动本地服务器，在浏览器输入<code>http://localhost:4000</code>即可看到初始博客内容<a id="more"></a>

</li>
</ul>
<h1 id="将博客部署到GitHub-Pages"><a href="#将博客部署到GitHub-Pages" class="headerlink" title="将博客部署到GitHub Pages"></a>将博客部署到GitHub Pages</h1><ul>
<li>为了将博客搭建到Github Pages，我们必须有<a href="https://github.com/" target="_blank" rel="noopener">Github</a>账号</li>
<li>有了Github账号后，创建命名方式为<code>yourname.github.io</code>的仓库<br><img src="https://note.youdao.com/yws/public/resource/85bfde07310e4e81fdbe68ab5f7e5dfc/xmlnote/3EF5803485A74431BA2C044A112CEF67/4047" alt="仓库命名"></li>
<li>使用git配置Github信息<ul>
<li><code>git -config --global user.name &quot;yourname&quot;</code></li>
<li><code>git -config --global user.email &quot;youremail&quot;</code></li>
<li>在命令行中输入<code>ssh-keygen -t rsa -C &quot;youremail@example.com</code> 一路回车 最后找到<code>id_rsa.pub</code>文件中的内容复制</li>
<li>将该文件中的内容复制到Github的<code>Settings --&gt; SSH and GPG keys</code>中</li>
<li>cmd中输入<code>ssh -T git@github.com</code>验证是否成功</li>
</ul>
</li>
<li>修改<code>_config.yml</code>内容(注意:后面有空格)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git&lt;&#x2F;br&gt;</span><br><span class="line">repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></li>
<li>部署<br>在命令行输入下面的命令即可完成部署，在该过程中会提示你输入用户名和密码。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li>
<li>进入博客<br>在浏览器输入<code>yourname.github.io</code>即可跳转至你的博客界面</li>
</ul>
<h1 id="修改博客的主题"><a href="#修改博客的主题" class="headerlink" title="修改博客的主题"></a>修改博客的主题</h1><ul>
<li>首先进入<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题网站</a>挑选主题</li>
<li>进入该主题的Github页面后，下方会有一个Clone的git命令，将该命令在命令行输入<br><img src="https://note.youdao.com/yws/public/resource/85bfde07310e4e81fdbe68ab5f7e5dfc/xmlnote/8E1387D748CB44CF90B7E5E32F5BD0AE/4046" alt="git连接"></li>
<li>进入<code>_config.yml</code> 找到<code>theme:</code>将其修改为主题文件夹的名称</li>
<li>重新运行博客即可完成主题修改</li>
</ul>
]]></content>
      <categories>
        <category>Hexo搭建</category>
      </categories>
  </entry>
  <entry>
    <title>二叉树的锯齿遍历</title>
    <url>/2021/09/06/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="关键点：如何控制树的左右遍历？"><a href="#关键点：如何控制树的左右遍历？" class="headerlink" title="关键点：如何控制树的左右遍历？"></a>关键点：如何控制树的左右遍历？</h3><h4 id="常规层序遍历"><a href="#常规层序遍历" class="headerlink" title="常规层序遍历"></a>常规层序遍历</h4><ul>
<li>使用一个队列queue记录当前所在层的结点。将队列中的结点取出，根据取出结点的左右结点，逐步放入下一层的结点。直到整棵树都遍历结束。即queue为空。</li>
<li>常规遍历方法始终从左到右进行遍历。并且都是向队列的尾部添加元素。</li>
</ul>
<h4 id="根据层数将遍历的结点放入队列头或者队列尾"><a href="#根据层数将遍历的结点放入队列头或者队列尾" class="headerlink" title="根据层数将遍历的结点放入队列头或者队列尾"></a>根据层数将遍历的结点放入队列头或者队列尾</h4><ul>
<li>在常规遍历的过程中，使用最常规的队列进行层间结点的存储。如果借助双端队列，就能够控制树的左右遍历。<ul>
<li>正常遍历：最左边的最靠近队头（添加到队列尾addLast）</li>
<li>反向遍历：最右边的最靠近队头（新的结点都添加到队头addFirst）</li>
<li>根据结点的层数（两种遍历交替进行），使用正常遍历和反向遍历，就可以完成锯齿型状的遍历。</li>
<li>双端队列可以模拟栈和队列</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/06/Gb6A8FqumJ45SzK.png" alt="M8V_YR1_9QS3ZIRWBGT00HD.png"></p>
<h4 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; nodeQueue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        Deque&lt;Integer&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        nodeQueue.offer(root);</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!nodeQueue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = nodeQueue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i)&#123;</span><br><span class="line">                TreeNode node = nodeQueue.poll();</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    nodeQueue.offer(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    nodeQueue.offer(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag == <span class="number">0</span>)&#123;</span><br><span class="line">                    queue.addLast(node.val);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    queue.addFirst(node.val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">0</span>) flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> flag = <span class="number">0</span>;</span><br><span class="line">            List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">                temp.add(queue.poll());</span><br><span class="line">            &#125;</span><br><span class="line">            ans.add(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>什么是微服务架构</title>
    <url>/2020/07/07/%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>论文地址：<a href="https://martinfowler.com/articles/microservices.html" target="_blank" rel="noopener">Microservices-a definition of this new architectural term</a></p>
<h4 id="什么是微服务架构风格？"><a href="#什么是微服务架构风格？" class="headerlink" title="什么是微服务架构风格？"></a>什么是微服务架构风格？</h4><ul>
<li>是一种将单个应用以多个小型服务进行部署的方法</li>
<li>每个小型服务以各自的进程运行</li>
<li>进程间通常以HTTP resource API进行通信</li>
</ul>
<h4 id="单块风格-monolithic-application-构建应用"><a href="#单块风格-monolithic-application-构建应用" class="headerlink" title="单块风格(monolithic application)构建应用"></a>单块风格(monolithic application)构建应用</h4><ul>
<li>应用通常分为三个部分<ul>
<li>客户端用户界面(运行在客户的机器上如浏览器)</li>
<li>数据库</li>
<li>服务器端应用(<strong>一个</strong>逻辑可运行程序)<br><img src="https://upload-images.jianshu.io/upload_images/9639303-1a65d688a908568a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="模式"></li>
<li>缺点<ul>
<li>程序稍微改动，整个程序就要重新构建和部署</li>
<li>时间长之后很难保持一个良好的结构</li>
<li>扩展需要对整个应用进行</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="微服务架构风格构建应用"><a href="#微服务架构风格构建应用" class="headerlink" title="微服务架构风格构建应用"></a>微服务架构风格构建应用</h4><ul>
<li>一个应用由多个服务组成</li>
<li>每个服务可独立部署与扩展</li>
<li>每个模块相互独立，甚至可以由不同的语言编写<br><img src="https://upload-images.jianshu.io/upload_images/9639303-76a8080772df1458.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="微服务架构"></li>
</ul>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
  </entry>
  <entry>
    <title>内存可见性</title>
    <url>/2021/10/09/%E5%86%85%E5%AD%98%E5%8F%AF%E8%A7%81%E6%80%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当有多个线程对共享变量进行读和写时，如果不使用同步的机制，无法保证读线程能够时刻读取到修改后的共享变量的值。讨论下述的代码行为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoVisibility</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> ready;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(!ready) Thread.yield();</span><br><span class="line">            System.out.println(number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ReaderThread().start();</span><br><span class="line">        number = <span class="number">42</span>;</span><br><span class="line">        ready = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在主线程中，将number设置为42，并将ready设置为true。Reader线程会读取ready的状态，如果不为true，循环等待。当ready为true时，会输出number的值。在指令是顺序执行的时候，可能不会导致Reader线程输出奇怪的数字。但是，现代编译器和处理器会针对代码进行指令重排，因此这可能会导致read先被置为true，然后Reader检测到ready为true，直接输出number = 0，从而产生了奇怪的输出。</p>
<h3 id="long-和-double的奇怪读写"><a href="#long-和-double的奇怪读写" class="headerlink" title="long 和 double的奇怪读写"></a>long 和 double的奇怪读写</h3><p>在Java中，long和double使用64bit进行存储。JVM在读取long和double时，会将此次操作分解为2次的32bit的操作。如果此时没有使用同步机制，那么可能会导致64bit的高位或低位的丢失，从而产生了奇怪的数值。</p>
]]></content>
      <categories>
        <category>Java MultiThreading</category>
      </categories>
  </entry>
  <entry>
    <title>使用码云进行版本控制</title>
    <url>/2020/07/03/%E4%BD%BF%E7%94%A8%E7%A0%81%E4%BA%91%E8%BF%9B%E8%A1%8C%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-注册码云账号"><a href="#1-注册码云账号" class="headerlink" title="1.注册码云账号"></a>1.注册码云账号</h4><p><img src="https://upload-images.jianshu.io/upload_images/9639303-8fb1a2cb334f4de9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="注册网址"></p>
<center>

<p><a href="https://gitee.com/signup" target="_blank" rel="noopener">账号注册地址</a></p>
</center>

<h4 id="2-下载Git"><a href="#2-下载Git" class="headerlink" title="2.下载Git"></a>2.下载Git</h4><p><img src="https://upload-images.jianshu.io/upload_images/9639303-b66cee8307576760.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Git下载"></p>
<center>

<p><a href="https://git-scm.com/" target="_blank" rel="noopener">下载地址</a></p>
</center>
下载完成后一路点击下一步安装即可

<h4 id="3-配置Git"><a href="#3-配置Git" class="headerlink" title="3.配置Git"></a>3.配置Git</h4><ul>
<li><p>寻找一个文件夹右键启动Git Bash（此处在桌面配置）<br><img src="https://upload-images.jianshu.io/upload_images/9639303-456dacee25175ca5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Git Bash"><br>弹出一下命令行<br><img src="https://upload-images.jianshu.io/upload_images/9639303-4da672d3c8928fa9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Bash"></p>
</li>
<li><p>配置Git的作者信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;xxx&quot;</span><br><span class="line">git config --global user.email &quot;xxx&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用ssh免密连接同步更新代码</p>
<ul>
<li>git bash中输入以下代码生成密钥(xxx邮箱地址)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxx&quot;</span><br></pre></td></tr></table></figure></li>
<li>连续回车生成密钥</li>
<li>查看密钥内容<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>将具体的密钥内容写入码云的SSH公钥</p>
<ul>
<li>进入码云的设置页面<br><img src="https://upload-images.jianshu.io/upload_images/9639303-83cab3e5b3a64bb7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置公钥"></li>
<li>添加公钥<br><img src="https://upload-images.jianshu.io/upload_images/9639303-7d3510f75925d820.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加公钥"><h4 id="4-测试是否配置成功"><a href="#4-测试是否配置成功" class="headerlink" title="4.测试是否配置成功"></a>4.测试是否配置成功</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="5-新建仓库-创建项目"><a href="#5-新建仓库-创建项目" class="headerlink" title="5. 新建仓库-创建项目"></a>5. 新建仓库-创建项目</h4><p><img src="https://upload-images.jianshu.io/upload_images/9639303-2738d71bf22618fc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建仓库"><br><img src="https://upload-images.jianshu.io/upload_images/9639303-8e0371cddf27af01.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="仓库页面"></p>
<ul>
<li>复制仓库地址<center>

</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/9639303-2016948190b87455.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="仓库地址"></p>
</center>

<ul>
<li>在IDEA中创建一个版本控制项目<br><img src="https://upload-images.jianshu.io/upload_images/9639303-a3e2a7c2f6a90769.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IDEA"></li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/9639303-29967597a26c8592.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="地址填入"></p>
<p>项目克隆完成</p>
<h4 id="6-使用-gitignore忽略不需要commit的文件"><a href="#6-使用-gitignore忽略不需要commit的文件" class="headerlink" title="6 使用.gitignore忽略不需要commit的文件"></a>6 使用.gitignore忽略不需要commit的文件</h4><ul>
<li>在项目的目录下，有一个.gitignore文件，可以用它来忽略不需要进行版本控制的垃圾文件。</li>
<li>点击右下角的version control进行查看(下图为处理后需要上传的文件)<br><img src="https://upload-images.jianshu.io/upload_images/9639303-448c7ad73164206d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="版本控制"></li>
<li>.gitignore文件<ul>
<li>**/xxx 任意目录下的xxx文件忽略<br><img src="https://upload-images.jianshu.io/upload_images/9639303-99a9c5978a60c7a7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="忽略"></li>
</ul>
</li>
<li>剩余的文件需要commit，右键选择 add to VCS 全部纳入版本控制</li>
</ul>
<h4 id="7-提交代码到码云"><a href="#7-提交代码到码云" class="headerlink" title="7.提交代码到码云"></a>7.提交代码到码云</h4><ul>
<li>安装码云插件 - settings-&gt;plugins-&gt;gitee<br><img src="https://upload-images.jianshu.io/upload_images/9639303-3f8b85ce49c83686.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="插件安装"></li>
<li>右键Version Control里的Changelist，选择commit files<br><img src="https://upload-images.jianshu.io/upload_images/9639303-0dc942d2e1e020c5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="commit"><br><img src="https://upload-images.jianshu.io/upload_images/9639303-3ca11f873e3fd234.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="commit box"></li>
<li>commit and push 提交代码到码云</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>注册中心</title>
    <url>/2021/07/14/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="注册中心的作用"><a href="#注册中心的作用" class="headerlink" title="注册中心的作用"></a>注册中心的作用</h3><ul>
<li>每一个微服务上线之后，需要将自己注册到注册中心，方便于各个微服务之间的访问。</li>
</ul>
<h3 id="Nacos实现注册中心"><a href="#Nacos实现注册中心" class="headerlink" title="Nacos实现注册中心"></a>Nacos实现注册中心</h3><h4 id="1-导入nacos-discovery-starter"><a href="#1-导入nacos-discovery-starter" class="headerlink" title="1. 导入nacos-discovery-starter"></a>1. 导入nacos-discovery-starter</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-在每一个微服务的配置文件中配置Nacos-Server地址（需要先下载nacos服务器）以及对应的应用名称"><a href="#2-在每一个微服务的配置文件中配置Nacos-Server地址（需要先下载nacos服务器）以及对应的应用名称" class="headerlink" title="2. 在每一个微服务的配置文件中配置Nacos Server地址（需要先下载nacos服务器）以及对应的应用名称"></a>2. 在每一个微服务的配置文件中配置Nacos Server地址（需要先下载nacos服务器）以及对应的应用名称</h4><ul>
<li>下载nacos server并启动（默认以cluster方式启动，应该修改为standalone模式）</li>
<li>application.yml中配置discover Server地址<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">discovery:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gulimall-coupon</span></span><br></pre></td></tr></table></figure></li>
<li>使用@EnableDiscoveryClient注解开启注册和发现功能<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallCouponApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(GulimallCouponApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
  </entry>
  <entry>
    <title>对象创建</title>
    <url>/2021/09/10/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="JVM创建对象的过程"><a href="#JVM创建对象的过程" class="headerlink" title="JVM创建对象的过程"></a>JVM创建对象的过程</h3><p><img src="https://i.loli.net/2021/09/10/njpBPOZlf9WAhwI.png" alt="对象分配.png"></p>
<ol>
<li>需要生成对象的对应类是否存在?</li>
<li>如果存在,是否已经载入?</li>
<li>已经载入,根据类的定义分配内存.</li>
<li>将对象内存进行零值初始化</li>
<li>设置对象头信息</li>
<li>调用init,初始化对象的全部信息.</li>
</ol>
<h3 id="对象的内存分布"><a href="#对象的内存分布" class="headerlink" title="对象的内存分布"></a>对象的内存分布</h3><p><img src="https://i.loli.net/2021/09/10/2myIExuXgBTUzCJ.png" alt="对象内存分布.png"></p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
  </entry>
  <entry>
    <title>注解开发SpringMVC</title>
    <url>/2020/07/13/%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91SpringMVC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-配置web-xml文件"><a href="#1-配置web-xml文件" class="headerlink" title="1.配置web.xml文件"></a>1.配置web.xml文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--绑定SpringMVC的配置文件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别为1，服务器启动就启动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            /:只匹配所有请求，不匹配jsp页面</span></span><br><span class="line"><span class="comment">            /*：会匹配所有请求，包括jsp</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-配置springmvc-servlet-xml"><a href="#2-配置springmvc-servlet-xml" class="headerlink" title="2.配置springmvc-servlet.xml"></a>2.配置springmvc-servlet.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--自动扫描包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.catty.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringMVC 不处理静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--自动开启Mapping和Adapter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器，寻找URL--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-使用注解写Controller"><a href="#3-使用注解写Controller" class="headerlink" title="3.使用注解写Controller"></a>3.使用注解写Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span> <span class="comment">//自动装配</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="comment">// localhost:8080/hello</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// localhost:8080/hello/hi</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/h1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"helloSpringMVC"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>; <span class="comment">//返回视图的名字，被视图解析器处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用@Controller，类会被Spring接管</li>
<li>使用该注解类的返回值为String的方法，如果有相应的页面可以跳转，则会被视图解析器解析</li>
<li>默认情况下为转发的方式，可以添加redirect声明重定向<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/1/xxx"</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-接收请求参数"><a href="#3-接收请求参数" class="headerlink" title="3.接收请求参数"></a>3.接收请求参数</h3><ul>
<li><p>参数名字与方法名字一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span> <span class="comment">//自动装配</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="comment">// localhost:8080/hello</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// localhost:8080/hello/hi</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/h1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name,Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"hello "</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>; <span class="comment">//返回视图的名字，被视图解析器处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">当输入的URL:localhost:<span class="number">8080</span>/springmvc02_war_exploded/hello/h1?name=gsy</span><br><span class="line">输出:hello gsy</span><br><span class="line"><span class="comment">/*----------------------使用RESTful方式----------------------------*/</span></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">//自动装配</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(path = <span class="string">"/h1/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@PathVariable String name,Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"hello "</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>; <span class="comment">//返回视图的名字，被视图解析器处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">URL:http:<span class="comment">//localhost:8080/springmvc02_war_exploded/h1/gsy</span></span><br><span class="line">输出:hello gsy</span><br></pre></td></tr></table></figure></li>
<li><p>参数名字与方法名字不一致 使用@RequestParam(“name”) </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span> <span class="comment">//自动装配</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(path = <span class="string">"/h1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String name,Model model)</span>&#123;</span><br><span class="line">        <span class="comment">//封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"hello "</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>; <span class="comment">//返回视图的名字，被视图解析器处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">URL:http:<span class="comment">//localhost:8080/springmvc02_war_exploded/h1?username=gsy</span></span><br><span class="line">输出:hello gsy</span><br></pre></td></tr></table></figure>
</li>
<li><p>接收一个对象</p>
<ul>
<li>接收参数</li>
<li>将参数与对象中的属性<strong>相匹配</strong>，如果名字一致则OK，否则无法找到<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//setter...</span></span><br><span class="line">    <span class="comment">//getter...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">//自动装配</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(path = <span class="string">"/h1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="comment">//封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"hello "</span> + user.getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>; <span class="comment">//返回视图的名字，被视图解析器处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">URL:http:<span class="comment">//localhost:8080/springmvc02_war_exploded/h1?name=gsy&amp;age=10</span></span><br><span class="line">输出:hello gsy</span><br></pre></td></tr></table></figure>
<font color="green" size=4>注意：使用表单提交也可以接收到前端传来的信息，也分为名字一致，不一致，多参数形成对象的类别</font></li>
</ul>
</li>
</ul>
<h3 id="4-中文乱码解决"><a href="#4-中文乱码解决" class="headerlink" title="4.中文乱码解决"></a>4.中文乱码解决</h3><p>在web.xml中配置SpringMVC的乱码过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title>垃圾回收算法</title>
    <url>/2021/09/14/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><p>GC在工作的过程中，首先需要分辨哪一些对象是存活，不需要回收的，哪一些对象是垃圾，需要回收。HotSpot虚拟机中采用可达性分析算法，从GC Roots Set中的引用出发，遍历标记所有存活的对象。标记完成后就需要对垃圾进行回收，主要的回收算法有下面三种。</p>
<ol>
<li>标记清除<br><img src="https://i.loli.net/2021/09/14/1LUW9nodwh6QKH3.png" alt="标记清楚.png"></li>
</ol>
<ul>
<li>该方法直接将标识为垃圾的对象进行回收。可以观察出该算法的运行时间随着对象规模的增加而增加。同时当回收的对象比较分散时，就会产生内存碎片。后续如果为大对象分配内存，可能会由于没有连续的足够内存空间而分配失败（总体的空闲内存空间足够），该算法的停顿时间较短STW，延迟较短。</li>
<li>新生代中的大部分对象的存在时间都非常短。如果使用该算法进行垃圾清理，效率较低。</li>
</ul>
<ol start="2">
<li>标记复制<br><img src="https://i.loli.net/2021/09/14/KvGf4RZEVxstoyW.png" alt="标记复制.png"></li>
</ol>
<ul>
<li>该算法将内存分成两个部分。一部分进行对象的内存分配，另一部分为空闲的内存。当需要进行垃圾回收时，将标记为存活的对象直接移动到另外的空闲内存。这也能够产生连续的内存空间，同时降低了大量垃圾对象导致的清理效率降低的缺点。如果内存区域中存活的对象一直都比较少，那么无论对象的规模多大，需要移动的对象都相对较稳定。该方法很适用于大多数清理过程都存活少量对象的区域，例如新生代。但该算法由于将内存分为了两个部分，导致内存的利用率下降，浪费了一半的内存空间。</li>
</ul>
<ol start="3">
<li>标记整理<br><img src="https://i.loli.net/2021/09/14/aWrF8Iyfnu496Dv.png" alt="标记整理.png"></li>
</ol>
<ul>
<li>为了避免内存碎片的产生，同时减少内存的浪费，该算法也是先对存活对象进行标识，然后将存活的对象在内存中进行整理。在整理的过程中对象就不可避免的会产生移动，此过程会消耗时间，同时需要更新移动后的对象的引用。需要较长时间的停顿STW，吞吐量较高。</li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
  </entry>
  <entry>
    <title>项目</title>
    <url>/2020/05/10/%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Luckyrable-微信小程序"><a href="#Luckyrable-微信小程序" class="headerlink" title="Luckyrable 微信小程序"></a>Luckyrable 微信小程序</h2><iframe height=250 width=450 src='https://player.youku.com/embed/XNDY2NjkxMDI1Mg==' frameborder=0 'allowfullscreen'></iframe>

<h2 id="Web端垃圾分类"><a href="#Web端垃圾分类" class="headerlink" title="Web端垃圾分类"></a>Web端垃圾分类</h2><iframe height=250 width=450 src='https://player.youku.com/embed/XNDY2NjkyNjk0MA==' frameborder=0 'allowfullscreen'></iframe>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>类的加载过程</title>
    <url>/2021/09/28/%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p><img src="https://i.loli.net/2021/09/28/zTSVetfYwCDvO7h.png" alt="加载.png"><br>一个类想要加载到内存的虚拟机内存中，必须先通过对应的<code>类全限定名称</code>读取对应的二进制class文件到内存的方法区中。当二进制数据读取到方法区后，为了访问类中的各类数据，在堆内存中生成<code>对应的Class对象</code>。后续对类数据的访问通过该对象进行。将class文件加载如方法区中依靠类加载器完成。</p>
<ul>
<li>类与类加载器一起共同确定类在Java虚拟机中的唯一性</li>
</ul>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p><img src="https://i.loli.net/2021/09/28/BXE2y5lOkzitJWp.png" alt="验证.png"><br>加载到虚拟机内存的class二进制流是否可信需要进一步的验证。验证包括<code>文件格式</code>、<code>元数据</code>、<code>字节码</code>、<code>符号引用</code>。分别从文件的定义、类的定义、方法定义、访问性进行验证。验证通过后，该类才能安全加载到内存中。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>当类的二进制流能够被安全加载到虚拟机内存后，对该类的变量进行默认初始化。各个类字段(static)会根据自己的类型进行默认初始化，例如int类型的会初始化为0。</p>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>该过程将类中的符号引用转变为直接引用。符号引用在执行的过程当中并不能够直接使用，需要转变为直接引用才能够对需要的部分进行访问。解析的内容包括<code>类或接口</code>、<code>字段</code>、<code>方法</code>。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>该步骤会将类变量真正的值赋予该变量。虚拟机会调用<code>cinit</code>对各个类变量进行赋值。例如一个类中的各个static变量。</p>
<h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p><img src="https://i.loli.net/2021/09/28/t7s9OWQfAr3HxFE.png" alt="加载器名空间.png"></p>
<ul>
<li>双亲委派模型<br>当一个类加载器收到类加载的请求，将该请求委派给父类加载器完成。因此所有的加载器最终都会传送给启动类加载器。只有父类无法加载时，子加载器才会尝试加载。</li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
  </entry>
  <entry>
    <title>注解说明</title>
    <url>/2020/07/10/%E6%B3%A8%E8%A7%A3%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h3><ul>
<li>需要确保aop包已经导入</li>
<li>需要导入context约束<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">        &lt;!--注意--&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span>  <span class="comment">&lt;!--注意--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
To <strong>autodetect</strong> classes and register the corresponding beans, you need to <strong>add @ComponentScan</strong> to your @Configuration class</li>
</ul>
<p><strong>使用</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.example"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意上述的配置已经隐含注解context，可以省略</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><ul>
<li>说明类被Spring管理了是一个bean，可通过context.getBean(name)获取，name是该类的小写名称<ul>
<li>衍生注解 - 一样是配置配bean<ul>
<li>dao层<ul>
<li><strong>@Repository</strong></li>
</ul>
</li>
<li>service层<ul>
<li><strong>@Service</strong></li>
</ul>
</li>
<li>controller层<ul>
<li><strong>@Controller</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Value-value"><a href="#Value-value" class="headerlink" title="@Value(value)"></a>@Value(value)</h3><ul>
<li>为属性注入值</li>
<li>${key} 从环境变量，配置文件中获取值</li>
<li>#{SpEL} Spring表达式语言，如#{10*2}</li>
</ul>
<h3 id="ConfigurationProperties-prefix-”xxx”"><a href="#ConfigurationProperties-prefix-”xxx”" class="headerlink" title="@ConfigurationProperties(prefix=”xxx”)"></a>@ConfigurationProperties(prefix=”xxx”)</h3><ul>
<li>将SpringBoot的配置文件中xxx的每一个属性的值映射到对应组件中</li>
<li>默认从全局配置文件中获取值 </li>
</ul>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>批量注入配置文件</td>
<td>一个一个注入</td>
</tr>
<tr>
<td>松散绑定</td>
<td>支持(驼峰命名lastName，last-name)</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持(注入值时，可以校验，结合@Validated)</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>- 使用时机：只是<strong>简单</strong>的获取配置文件的某个值，那么用@Value就可</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="PropertySource-value-“classpath-xxx-properties”"><a href="#PropertySource-value-“classpath-xxx-properties”" class="headerlink" title="@PropertySource(value = {“classpath:xxx.properties”})"></a>@PropertySource(value = {“classpath:xxx.properties”})</h3><ul>
<li>加载类路径下xxx.properties中的值</li>
</ul>
<a id="more"></a>
<h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><ul>
<li>实现类的自动装配</li>
<li>可以结合使用注解 <strong>@Qualifier(value=”xxx”)</strong>对特定的类进行装配</li>
</ul>
<h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><ul>
<li>类可以通过名字、类型自动装配</li>
</ul>
<h3 id="Nullable"><a href="#Nullable" class="headerlink" title="@Nullable"></a>@Nullable</h3><ul>
<li>说明该字段可以为null</li>
</ul>
<h3 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3><ul>
<li>说明这个bean是单例还是原型模式</li>
</ul>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><ul>
<li>说明这是一个配置类(推荐在SpringBoot中使用)<ul>
<li><h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><ul>
<li>注册一个bean，相当于xml中的bean标签</li>
<li>方法的名字相当于bean标签中的id属性</li>
<li>方法的返回值相当于bean标签的class属性</li>
<li>使用一个额外的配置类，利用方法名字和返回值将对应类的bean放入容器中<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="meta">@Configuration</span><span class="comment">//配置类</span></span><br><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClass</span> </span>&#123;</span><br><span class="line">            <span class="meta">@Bean</span> <span class="comment">//id=helloService class=com.cat.HelloService</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Import-config-class"><a href="#Import-config-class" class="headerlink" title="@Import(config.class)"></a>@Import(config.class)</h3><ul>
<li>引入另一个配置类的配置(多人开发)</li>
</ul>
<h3 id="Aspect"><a href="#Aspect" class="headerlink" title="@Aspect"></a>@Aspect</h3><ul>
<li>将一个类标注为切面</li>
</ul>
<h3 id="Before-“execution-”"><a href="#Before-“execution-”" class="headerlink" title="@Before(“execution()”)"></a>@Before(“execution()”)</h3><ul>
<li>一个在切入点前的Method</li>
</ul>
<h3 id="PathVariable-“execution-”"><a href="#PathVariable-“execution-”" class="headerlink" title="@PathVariable(“execution()”)"></a>@PathVariable(“execution()”)</h3><ul>
<li>让方法参数的值绑定到一个URL模板变量上</li>
</ul>
<h3 id="RequestParam-“name”"><a href="#RequestParam-“name”" class="headerlink" title="@RequestParam(“name”)"></a>@RequestParam(“name”)</h3><ul>
<li>接收URL传来的参数，参数名为name</li>
</ul>
<h3 id="Param-“alia”"><a href="#Param-“alia”" class="headerlink" title="@Param(“alia”)"></a>@Param(“alia”)</h3><ul>
<li>mybatis对CURD实现时的参数</li>
</ul>
<h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><ul>
<li>controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区</li>
</ul>
<h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><ul>
<li>@Controller和@ResponseBody的组合注解</li>
</ul>
<h3 id="Validated"><a href="#Validated" class="headerlink" title="@Validated"></a>@Validated</h3><ul>
<li>Java Bean里面的属性需要校验<ul>
<li>@Email：属性值必须是邮箱地址的形式</li>
</ul>
</li>
</ul>
<h3 id="ImportResource-locations-“classpath-xxx-xml”"><a href="#ImportResource-locations-“classpath-xxx-xml”" class="headerlink" title="@ImportResource(locations = {“classpath:xxx.xml”})"></a>@ImportResource(locations = {“classpath:xxx.xml”})</h3><ul>
<li>注：Spring Boot中没有Spring配置文件，自己编写的配置文件不能够识别，如将某个类加入Spring容器中</li>
<li>使用这个注解，能够导入Spring的配置文件xxx.xml，让配置文件内容生效</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>配置中心</title>
    <url>/2021/07/14/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="配置中心的作用"><a href="#配置中心的作用" class="headerlink" title="配置中心的作用"></a>配置中心的作用</h3><ul>
<li>统一管理每一个微服务模块的配置</li>
</ul>
<h3 id="Nacos实现配置中心"><a href="#Nacos实现配置中心" class="headerlink" title="Nacos实现配置中心"></a>Nacos实现配置中心</h3><h4 id="1-在微服务中引入Nacos-Config-Starter"><a href="#1-在微服务中引入Nacos-Config-Starter" class="headerlink" title="1. 在微服务中引入Nacos Config Starter"></a>1. 在微服务中引入Nacos Config Starter</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-resources中创建一个bootstrap-properties配置文件"><a href="#2-resources中创建一个bootstrap-properties配置文件" class="headerlink" title="2. resources中创建一个bootstrap.properties配置文件"></a>2. resources中创建一个bootstrap.properties配置文件</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">//当前应用的名字</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-coupon</span></span><br><span class="line"><span class="attr">//配置中心地址</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure>

<h4 id="3-RefreshScope动态刷新注解"><a href="#3-RefreshScope动态刷新注解" class="headerlink" title="3. @RefreshScope动态刷新注解"></a>3. @RefreshScope动态刷新注解</h4><h4 id="4-命名空间（进行配置隔离）"><a href="#4-命名空间（进行配置隔离）" class="headerlink" title="4. 命名空间（进行配置隔离）"></a>4. 命名空间（进行配置隔离）</h4><ul>
<li>默认：public（保留空间），新增的配置都在public空间</li>
<li>可以在nacos命名空间中建立新的命名空间，例如为dev建立命名空间，test建立命名空间，然后分别建立properties配置（基于开发环境进行隔离）</li>
<li>为某一个微服务选择某一个命名空间：在对应的bootstrap.properties中添加spring.cloud.nacos.config.namespace=xxx（命名空间的ID）</li>
<li>可以为某一个微服务创建属于自己的命名空间，实现配置的隔离。 </li>
</ul>
<h4 id="5-概念"><a href="#5-概念" class="headerlink" title="5. 概念"></a>5. 概念</h4><ul>
<li>配置集：所有的配置的集合称为配置集</li>
<li>配置集ID： nacos中的 Data ID（配置文件名）</li>
<li>配置分组： 默认所有的配置集都属于Default Group（声明某一个微服务使用哪一个组的配置，在bootstrap中添加spring.cloud.nacos.config.group=xxx（group名称））</li>
</ul>
<h4 id="6-同时加载多个配置集"><a href="#6-同时加载多个配置集" class="headerlink" title="6. 同时加载多个配置集"></a>6. 同时加载多个配置集</h4><ul>
<li>微服务可能有多种的配置，例如datasource的配置，三大框架的配置，nacos配置等等。可以在该微服务的命名空间中创建对应的properties配置文件，然后在bootstrap.properties中声明使用这一些配置文件。<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">spring.cloud.nacos.config.ext-config[0].data-id=xxx</span></span><br><span class="line"><span class="string">spring.cloud.nacos.config.ext-config[0].group=xxx</span></span><br><span class="line"><span class="string">spring.cloud.nacos.config.ext-config[0].refresh=true</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
  </entry>
</search>
